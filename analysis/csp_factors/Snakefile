


rule get_csp_from_git:
  wildcard_constraints:
    version = "(v0r0|v0r1)",                      # v0r0 not allowed
  params:
    repo = "ssh://git@gitlab.cern.ch:7999/lhcb-b2cc/Bs2JpsiPhi-FullRun2.git",
  output:
    params = "output/params/csp_factors/{year}/{mode}/{version}.json",
  run:
    import os
    import hjson
    from ipanema import Parameters

    year = f"{wildcards.year}"
    version = f"{wildcards.version}"

    if version in ('v0r0','v0r1','v0r2','v0r3','v0r4'):
      params = Parameters.load(f'csp_factors/CSP.json')
      print(params)
      params.dump(f"{output.params}")
      print(f'Dumping parameters to {output.params}')
    else:
      os.makedirs("./tmp/{year}",exist_ok=True)
      #csp_path = f"fitinputs/{version}/Csp/{year}/"     # YEARLY
      csp_path = f"fitinputs/{version}/Csp/All/"        # SHARED

      print(f"\n{80*'='}\n",
            "Get CSP from Bs2JpsiPhi-FullRun2 repository",
            f"\n{80*'='}\n")

      print(f'Downloading Bs2JpsiPhi-FullRun2:{csp_path}CspFactors{year}.json')
      #os.system(f"git archive --remote={params.repo} --prefix=./tmp/ HEAD:{csp_path} CspFactors{year}.json | tar -x")     # YEARLY
      os.system(f"git archive --remote={params.repo} --prefix=./tmp/{year}/ HEAD:{csp_path} CspFactorsAll.json | tar -x")     # SHARED

      print(f"Loading CspFactors{year}.json")
      #raw_json = hjson.load( open(f'./tmp/CspFactors{year}.json','r') )     # YEARLY
      #raw_json = raw_json[f'{year}']['CspFactors']
      raw_json = hjson.load( open(f'./tmp/{year}/CspFactorsAll.json','r') )     # SHARED
      raw_json = raw_json[f'All']['CspFactors']

      print(f'Parsing parameters to match phis-scq sctructure')
      cooked = {};
      for i, d in enumerate(raw_json):
        bin = i+1
        cooked[f'CSP{bin}'] = {'name':f'CSP{bin}'}
        cooked[f'CSP{bin}'].update({'value':d['Value'], 'stdev':d['Error'] })
        cooked[f'CSP{bin}'].update({'latex': f"C_{{SP}}^{{{bin}}}"})
        cooked[f'CSP{bin}'].update({'free': False})
        if not f'mKK{bin-1}' in cooked:
          cooked[f'mKK{bin-1}'] = {'name':f'mKK{bin-1}'}
          cooked[f'mKK{bin-1}'].update({'value':d['Bin_ll'], 'stdev':0 })
          cooked[f'mKK{bin-1}'].update({'latex':f'm_{{KK}}^{{{bin-1}}}'})
          cooked[f'mKK{bin-1}'].update({'free': False})
        if not f'mKK{bin}' in cooked:
          cooked[f'mKK{bin}'] = {'name':f'mKK{bin}'}
          cooked[f'mKK{bin}'].update({'value':d['Bin_ul'], 'stdev':0 })
          cooked[f'mKK{bin}'].update({'latex':f'm_{{KK}}^{{{bin}}}'})
          cooked[f'mKK{bin}'].update({'free': False})

      # Build the ipanema.Parameters object
      print(f"\nCSP parameters for {year} are:")
      list_params = list(cooked.keys())                 # list all parameter names
      list_params = sorted( list_params )               # sort them
      params = Parameters()
      [params.add(cooked[par]) for par in list_params]
      print(params)
      params.dump(f"{output.params}")
      print(f'Dumping parameters to {output.params}')
      #print(f'Clean up ./tmp/CspFactors{year}.json\n')
      #os.remove(f"./tmp/CspFactors{year}.json")
      print(f'Clean up ./tmp/{year}/CspFactorsAll.json\n')
      os.remove(f"./tmp/{year}/CspFactorsAll.json")
