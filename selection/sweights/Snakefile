# SWEIGHTS
#
#   Description: Background subtracted samples are required to perfrom fits to the time-angular distribution of Bq mesons if the background
#                is not modelled. Within the whole phis-scq pipeline all fits
#                asume the samples are background subtracted. This set of rules
#                allow the user to compute sWeights for all the involved modes.
#                TODO: complete the following description:
#                * massmodel: This wildcard allows to use different mass models
#                      for any of the Bq modes.
#                * massbin: If 
#                      basically tell which kind of rules are run.
#
#        Author: Marcos Romero Lamas (mromerol@cern.ch)
#                Ramón Ángel Ruiz Fernandez (rruizfer@cern.ch)


# PID issue solver {{{
#TODO clean this shit
# rule prefit_singlemassbin_bs:
#   threads: 2
#   resources:
#     mem_mb=6000
#   wildcard_constraints:
#     mode = 'MC_(Bs2JpsiPhi)(_dG0)?'
#   input:
#     sample = lambda wcs: tuples(wcs, weight='lbWeight') #will imply problems then
#     # root_file = lambda wcs: tuples(wcs, version=f"{wcs.version}".replace('LSB', "").replace("RSB", ""), weight='chopped'),
#   output:
#     params = 'output/params/mass_prefit_singlemassbin/{year}/{mode}/{version}.json',
#     plots = directory('output/figures/mass_prefit_singlemassbin/{year}/{mode}/{version}/')
#   params:
#     script = 'selection/sweights/mass_fit/mf_singlemassbin.py' ,
#     mass_branch = 'B_ConstJpsi_M_1',
#   log:
#     'output/log/mass_prefit_singlemassbin/{year}/{mode}/{version}.log',
#   run:
#     shell(f"""(time\
#       python {params.script} \
#       --sample {input.sample} \
#       --output-params {output.params} \
#       --output-figures {output.plots} \
#       --mass-bin 'all' \
#       --mode {wildcards.mode} \
#       --version {wildcards.version} \
#     ) &> {log}""")
#
# rule fit_singlemassbin_mc_bs:
#   threads: 2
#   resources:
#     mem_mb=6000
#   wildcard_constraints:
#     mode = '(MC_)(Bs2JpsiPhi)(_dG0)?'
#   input:
#     sample = lambda wcs: tuples(wcs, weight='lbWeight'), #will imply problems then
#     params = 'output/params/mass_prefit_singlemassbin/{year}/{mode}/{version}.json',
#   output:
#     params = 'output/params/mass_fit_singlemassbin/{year}/{mode}/{version}.json',
#     plots = directory('output/figures/mass_fit_singlemassbin/{year}/{mode}/{version}/'),
#     root_file = SAMPLES+'/{year}/{mode}/{version}_pregbw.root',
#   params:
#     script = 'selection/sweights/mass_fit/mf_singlemassbin.py',
#     mass_model = "cbcalib",
#     mass_branch = 'B_ConstJpsi_M_1',
#   log:
#     'output/log/mass_fit_singlemassbin/{year}/{mode}/{version}.log',
#   run:
#     shell(f"""(time\
#     python {params.script} \
#     --sample {input.sample} \
#     --input-params {input.params} \
#     --output-params {output.params} \
#     --output-figures {output.plots} \
#     --mass-bin 'all' \
#     --sweights {output.root_file} \
#     --mode {wildcards.mode} \
#     --version {wildcards.version} \
#     ) &> {log}""")
#
#
# rule fit_singlemassbin_rd_bs:
#   threads: 2
#   resources:
#     mem_mb=6000
#   wildcard_constraints:
#     mode = '(Bs2JpsiPhi)'
#   input:
#     sample = lambda wcs: tuples(wcs, weight='lbWeight'), #will imply problems then
#     params = 'output/params/mass_prefit_singlemassbin/{year}/MC_{mode}/{version}.json',
#   output:
#     params = 'output/params/mass_fit_singlemassbin/{year}/{mode}/{version}.json',
#     plots = directory('output/figures/mass_fit_singlemassbin/{year}/{mode}/{version}/'),
#     root_file = SAMPLES+'/{year}/{mode}/{version}_pregbw.root',
#   params:
#     script = 'selection/sweights/mass_fit/mf_singlemassbin.py',
#     # script = 'selection/sweights/mass_fit/mf_singlemassbin.py',
#     mass_model = "cbcalib",
#     mass_branch = 'B_ConstJpsi_M_1',
#   log:
#     'output/log/mass_fit_singlemassbin/{year}/{mode}/{version}.log',
#   run:
#     shell(f"""(time\
#     python {params.script} \
#     --sample {input.sample} \
#     --input-params {input.params} \
#     --output-params {output.params} \
#     --output-figures {output.plots} \
#     --mass-bin 'all' \
#     --sweights {output.root_file} \
#     --mode {wildcards.mode} \
#     --version {wildcards.version} \
#     ) &> {log}""")
#
# rule prefit_singlemassbin_bd:
#   threads: 2
#   resources:
#     mem_mb=6000
#   wildcard_constraints:
#     mode = 'MC_Bd2JpsiKstar'
#   input:
#     sample = lambda wcs: tuples(wcs, weight='lbWeight') #will imply problems then
#     # root_file = lambda wcs: tuples(wcs, version=f"{wcs.version}".replace('LSB', "").replace("RSB", ""), weight='chopped'),
#   output:
#     params = 'output/params/mass_prefit_singlemassbin/{year}/{mode}/{version}.json',
#     plots = directory('output/figures/mass_prefit_singlemassbin/{year}/{mode}/{version}/')
#   params:
#     script = 'selection/sweights/mass_fit/mf_singlemassbin_bd.py',
#     mass_branch = 'B_ConstJpsi_M_1',
#   log:
#     'output/log/mass_prefit_singlemassbin/{year}/{mode}/{version}.log',
#   run:
#     shell(f"""(time\
#       python {params.script} \
#       --sample {input.sample} \
#       --output-params {output.params} \
#       --output-figures {output.plots} \
#       --mass-bin 'all' \
#       --mode {wildcards.mode} \
#       --version {wildcards.version} \
#     ) &> {log}""")
#
# rule fit_singlemassbin_mc_bd:
#   threads: 2
#   resources:
#     mem_mb=6000
#   wildcard_constraints:
#     mode = 'MC_Bd2JpsiKstar'
#   input:
#     sample = lambda wcs: tuples(wcs, weight='lbWeight'), #will imply problems then
#     params = 'output/params/mass_prefit_singlemassbin/{year}/{mode}/{version}.json',
#   output:
#     params = 'output/params/mass_fit_singlemassbin/{year}/{mode}/{version}.json',
#     plots = directory('output/figures/mass_fit_singlemassbin/{year}/{mode}/{version}/'),
#     root_file = SAMPLES+'/{year}/{mode}/{version}_pregbw.root',
#   params:
#     script = 'selection/sweights/mass_fit/mf_singlemassbin_bd.py',
#     mass_model = "cbcalib",
#     mass_branch = 'B_ConstJpsi_M_1',
#   log:
#     'output/log/mass_fit_singlemassbin/{year}/{mode}/{version}.log',
#   run:
#     shell(f"""(time\
#     python {params.script} \
#     --sample {input.sample} \
#     --input-params {input.params} \
#     --output-params {output.params} \
#     --output-figures {output.plots} \
#     --mass-bin 'all' \
#     --sweights {output.root_file} \
#     --mode {wildcards.mode} \
#     --version {wildcards.version} \
#     ) &> {log}""")
#
#
# rule fit_singlemassbin_rd_bd:
#   threads: 2
#   resources:
#     mem_mb=6000
#   wildcard_constraints:
#     mode = 'Bd2JpsiKstar'
#   input:
#     sample = lambda wcs: tuples(wcs, weight='lbWeight'), #will imply problems then
#     params = 'output/params/mass_prefit_singlemassbin/{year}/MC_{mode}/{version}.json',
#   output:
#     params = 'output/params/mass_fit_singlemassbin/{year}/{mode}/{version}.json',
#     plots = directory('output/figures/mass_fit_singlemassbin/{year}/{mode}/{version}/'),
#     root_file = SAMPLES+'/{year}/{mode}/{version}_pregbw.root',
#   params:
#     script = 'selection/sweights/mass_fit/mf_singlemassbin_bd.py',
#     mass_model = "cbcalib",
#     mass_branch = 'B_ConstJpsi_M_1',
#   log:
#     'output/log/mass_fit_singlemassbin/{year}/{mode}/{version}.log',
#   run:
#     shell(f"""(time\
#     python {params.script} \
#     --sample {input.sample} \
#     --input-params {input.params} \
#     --output-params {output.params} \
#     --output-figures {output.plots} \
#     --mass-bin 'all' \
#     --sweights {output.root_file} \
#     --mode {wildcards.mode} \
#     --version {wildcards.version} \
#     ) &> {log}""")

rule sw8_paleros:
  """
  This is because gbw8 are calculated before BDT, we think this is a possible bias
  lets try a first set of sw8 then do the gbw8 and then lets do the chopped and all
  the machinery.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = '(MC_)?(Bd2JpsiKstar|Bs2JpsiPhi)(_dG0)?', #For the moment only for RD
  input:
    sample = lambda wcs: tuples(wcs, weight='lbWeight') #will imply problems then
  output:
    plots = directory('output/figures/mass_fitpalero/{year}/{mode}/{version}/'),
    root_file = SAMPLES+'/{year}/{mode}/{version}_pregbw.root',
    pars_biased = 'output/params/sw8_paleros/{year}/{mode}/{version}_biased.json',
    pars_unbiased = 'output/params/sw8_paleros/{year}/{mode}/{version}_unbiased.json',
  params:
    script = 'selection/sweights/mass_fit/bkg_substraction.py',
    mass_model = "dgauss",
    mass_branch = 'B_ConstJpsi_M_1',
    mass_weight =  'wLb'
  log:
    'output/log/sw_paleros/{year}/{mode}/{version}.log',
  run:
    shell('mkdir -p {output.plots}')
    shell('(time python {params.script} \
        --sample {input.sample} \
        --sweights {output.root_file} \
        --mass-branch {params.mass_branch} \
        --mass-model {params.mass_model} \
        --mass-weight {params.mass_weight} \
        --output-params-biased {output.pars_biased} \
        --output-params-unbiased {output.pars_unbiased} \
        --output-figures {output.plots} \
        --mode {wildcards.mode} \
        --version {wildcards.version} \
        --year {wildcards.year}) &> {log}')


rule gb_weighting:
  resources:
    mem_mb=7168,
    threads=2
  wildcard_constraints:
    mode = "MC_(Bs2JpsiPhi|Bd2JpsiKstar)(_dG0)?"
  input:
    # original = lambda wcs: tuples(wcs, weight='ready'),
    original = lambda wcs: tuples(wcs, version=f'{wcs.version}'.split('@')[0].split('~')[0].split('bdt')[0], year=f'{wcs.year}', weight=f'pregbw'),
    target = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_pregbw.root',
                               year = wcs.year,
                               mode = wcs.mode.replace("MC_", "").replace("_dG0",""),
                               version = wcs.version
                                ),
  output:
    sample = SAMPLES+'/{year}/{mode}/{version}_gbw.root'
  log:
    'output/log/gb_weighting/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
    python analysis/reweightings/kinematic_weighting.py\
    --original-file {input.original}\
    --original-treename DecayTree\
    --target-file {input.target}\
    --target-treename DecayTree\
    --output-file {output.sample}\
    --mode {wildcards.mode}\
    --year {wildcards.year}\
    --version {wildcards.version}\
    --weight-set gbWeight\
    ) &> {log}""")
    send_mail(f"Kinematic Bs weighting :: {wildcards}", f"{log}")


# mass fitters for Bd {{{


rule mass_prefit_bd_mc:
  """
  Run mass fit on selected Bs0->J/psiPhi MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bd2JpsiKstar',
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
  output:
    params = temp('output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json'),
    plots = directory('output/figures/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/bd.py',
    mass_weight = config['gb_weight_branch']
  log:
    'output/log/mass_prefit_bd_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-weight {params.mass_weight} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    ) &> {log}""")


rule mass_fit_bd_mc:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bd2JpsiKstar',
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/bd.py',
    mass_weight = config['gb_weight_branch']
  log:
    'output/log/mass_fit_bd_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-weight {params.mass_weight} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    --version {wildcards.version} \
    ) &> {log}""")


rule mass_fit_bd_rd:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'Bd2JpsiKstar',
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
    params = 'output/params/mass_prefit/{year}/MC_{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/bd.py',
  log:
    'output/log/mass_fit_bd_rd/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    --version {wildcards.version} \
    ) &> {log}""")

# }}}


# mass fitters for Bu {{{

rule mass_prefit_bu_mc:
  """
  Run mass fit on selected Bs0->J/psiPhi MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bu2JpsiKplus',
  input:
    # root_file = lambda wcs: tuples(wcs, weight='selected'),
    # root_file = lambda wcs: tuples(wcs, weight='selected' if 'ForTag' in ),
    root_file = lambda wcs: tuples(wcs, weight='selected', version=f'{wcs.version}'.split('@')[0]) if 'ForTag' in f"{wcs.massmodel}" else tuples(wcs, weight='chopped'),
  output:
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    plots = directory('output/figures/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/bu.py',
  log:
    'output/log/mass_prefit_bu_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    ) &> {log}""")


rule mass_fit_bu_mc:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bu2JpsiKplus',
  input:
    # root_file = lambda wcs: tuples(wcs, weight='selected'),
    # root_file = lambda wcs: tuples(wcs),
    root_file = lambda wcs: tuples(wcs, weight='selected', version=f'{wcs.version}'.split('@')[0]) if 'ForTag' in f"{wcs.massmodel}" else tuples(wcs, weight='chopped'),
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/bu.py',
  log:
    'output/log/mass_fit_bu_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    --version {wildcards.version} \
    ) &> {log}""")


rule mass_fit_bu_rd:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'Bu2JpsiKplus',
  input:
    # root_file = lambda wcs: tuples(wcs, weight='selected'),
    # root_file = lambda wcs: tuples(wcs),
    root_file = lambda wcs: tuples(wcs, weight='selected', version=f'{wcs.version}'.split('@')[0]) if 'ForTag' in f"{wcs.massmodel}" else tuples(wcs, weight='chopped'),
    params = 'output/params/mass_prefit/{year}/MC_{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/bu.py',
  log:
    'output/log/mass_fit_bu_rd/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    --version {wildcards.version} \
    ) &> {log}""")

# }}}


# mass fitters for Bs {{{

rule mass_prefit_bs_mc:
  """
  Run mass fit on selected Bs0->J/psiPhi MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_(Bs2JpsiPhi(_dG0)?|Bs2JpsiKK_Swave)'
  input:
    root_file = lambda wcs: tuples(wcs, version=f"{wcs.version}".replace('LSB', "").replace("RSB", ""), weight='chopped'),
  output:
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    plots = directory('output/figures/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/bs.py',
    mass_weight = config['gb_weight_branch']
  log:
    'output/log/mass_prefit_bs_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-weight {params.mass_weight} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    ) &> {log}""")


rule mass_fit_bs_mc:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_(Bs2JpsiPhi(_dG0)?|Bs2JpsiKK_Swave)'
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/bs.py',
    mass_weight = config['gb_weight_branch']
  log:
    'output/log/mass_fit_bs_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-weight {params.mass_weight} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    --sweights {output.sweights} \
    ) &> {log}""")


rule mass_fit_bs_rd:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'Bs2JpsiPhi'
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
    params = 'output/params/mass_prefit/{year}/MC_{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/bs.py',
  log:
    'output/log/mass_fit_bs_rd/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-weight wLb \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    --sweights {output.sweights} \
    ) &> {log}""")

# }}}


# mass fitters for Ds {{{

rule mass_prefit_ds_mc:
  """
  Run mass fit on selected Bs0->J/psiPhi MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bs2DsPi'
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
  output:
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    plots = directory('output/figures/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/ds.py',
  log:
    'output/log/mass_prefit_ds_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    ) &> {log}""")


rule mass_fit_ds_mc:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bs2DsPi'
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/ds.py',
  log:
    'output/log/mass_fit_ds_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    --sweights {output.sweights} \
    ) &> {log}""")


rule mass_fit_ds_rd:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'Bs2DsPi'
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
    params = 'output/params/mass_fit/{year}/MC_{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/ds.py',
  log:
    'output/log/mass_ft_ds_rd/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    --sweights {output.sweights} \
    ) &> {log}""")

# }}}


# rules for Lb sWeights {{{

rule mass_fit_bs_lb:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = ".*(_fromLb|_Lb)",
    trigger = 'k(plus|minus)'
  input:
    root_file = lambda wcs: tuples(wcs, weight='tagged'),
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/sweights/mass_fit/lb.py',
  log:
    'output/log/mass_bs_lb/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --nosep {wildcards.trigger}\
    --mode {wildcards.mode} \
    --year {wildcards.year} \
    --sweights {output.sweights} \
    --version {wildcards.version} \
    ) &> {log}""")

# }}}


# rules to produce sWeights  {{{

# TODO: Theseset of rules can be *obviously* be merged

def guess_massbins(wcs, version=False, mode=False):
    if not version:
        version = f"{wcs.version}"
    if not mode:
        mode = f"{wcs.mode}"

    if not 'MC' in mode:
        _mode = f'{wcs.mode}'.lower()[:2]
    else:
        _mode = f'{wcs.mode}'.split('_')[1].lower()[:2]
    # _mode = f'{wcs.mode}'.lower()[:2]

    mass_model = config[_mode  + "_mass_model"]
    v = version.split('@')
    if len(v) > 1:
        v, c = v
    else:
        v, c = v[0], False
    v = v.split('~')
    # print(v)
    if len(v) > 1:
        v, w = v
    else:
        v, w = v[0], False
    # print(v, w, c)
    if 'Bs' in mode:
      if not w:
        w = 'mX6'
      if 'bkgcat60' in version and 'MC' in mode:
        # print('bkg detected')
        w = ''
    else:
        w = ''

    # print(v, w, c)
    pattern = [
        "(mX(1|2|3|4|5|6))?",
        "(time(1|2|3|4))?",
        "(cosL(1|2|3|4))?",
        "(cosK(1|2|3|4))?",
        "(hphi(1|2|3|4))?",
        "(sigmam(1|2|3|4|5|6|7|8|9))?",
    ]
    pattern = rf"\A{''.join(pattern)}\Z"
    p = re.compile(pattern)
    try:
        q = p.search(w).groups()
        mX = int(q[1]) if q[0] else False
        time = int(q[3]) if q[2] else False
        cosL = int(q[5]) if q[4] else False
        cosK = int(q[7]) if q[6] else False
        hphi = int(q[9]) if q[8] else False
        sigmam = int(q[11]) if q[10] else False

        if mX:
            mX = [f'mX{i}' for i in range(1, mX+1)]
        else:
            mX = ['all']

        if time:
            time = [f'time{i}' for i in range(1, time+1)]
        else:
            time = ['']

        if cosL:
            cosL = [f'cosL{i}' for i in range(1, cosL+1)]
        else:
            cosL = ['']

        if cosK:
            cosK = [f'cosK{i}' for i in range(1, cosK+1)]
        else:
            cosK = ['']

        if hphi:
            hphi = [f'hphi{i}' for i in range(1, hphi+1)]
        else:
            hphi = ['']

        if sigmam:
            sigmam = [f'sigmam{i}' for i in range(1, sigmam+1)]
        else:
            sigmam = ['']

        caca = []
        for b1 in mX:
            for b2 in time:
                for b3 in cosL:
                    for b4 in cosK:
                        for b5 in hphi:
                            for b6 in sigmam:
                                caca.append(f"{b1}{b2}{b3}{b4}{b5}{b6}")
    except:
        raise ValueError(f'Cannot interpret {w} as a sWeight config')
    return caca




def tuple_and_npy_for_sweights(wcs, version=None, year=None, mode=None, what='tuple', sweight=None):
    if not version:
        version = wcs.version
    if not year:
        year = wcs.year
    if not mode:
        mode = wcs.mode
    if not sweight:
        sweight = wcs.sweight
    # print("DEBUG:", version, year, mode, sweight,)
    _is_for = "Tag" if "Tag" in sweight else ""
    _name = version.split('@')[0] if _is_for == "Tag" else version
    _surname = "selected" if _is_for == "Tag" else "chopped"
    _massbin = guess_massbins(wcs)
    _massmodel = config[(f'{wcs.mode}'.lower()[:2] if not 'MC' in f'{wcs.mode}' else f'{wcs.mode}'.split('_')[1].lower()[:2]) + "_mass_model"]
    _massmodel = f"{_massmodel}ForTag" if _is_for == "Tag" else _massmodel

    # root file
    if what == 'tuple':
        # print( tuples(wcs, version=_name, weight=_surname) )
        return tuples(wcs, version=_name, weight=_surname)
    # parameters
    parameters = []
    for _item in what:
        for _bin in _massbin:
            parameters.append(SAMPLES + f'/{year}/{mode}/{_name}_{_massmodel}_{_bin}_{_item}.npy')
    # print(parameters)
    return parameters

rule sweights_add:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  wildcard_constraints:
    mode = ".*((?!.*?(_fromLb|_Lb)).*)",
    sweight = "(sWeight|sWeightForTag)"
  threads: 2
  resources:
    mem_mb=12000
  input:
    root_file = lambda w: tuple_and_npy_for_sweights(w),
    sweights = lambda w: tuple_and_npy_for_sweights(w, what=['combined'] if "Ds" in w.mode else ['biased', 'unbiased']),
    # unbiased = lambda wcs: tuple_and_npy_for_sweights(wcs, what='unbiased'),
    # root_file = lambda wcs: tuples(wcs, weight='chopped' if 'Bu' not in f'{wcs.mode}' else 'selected'),
    # biased = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_biased.npy',
    #                             year=f"{wcs.year}", mode=f"{wcs.mode}", version=f"{wcs.version}",
    #                             massbin=guess_massbins(wcs),
    #                             massmodel=config[(f'{wcs.mode}'.lower()[:2] if not 'MC' in f'{wcs.mode}' else f'{wcs.mode}'.split('_')[1].lower()[:2]) + "_mass_model"]
    #                            ),
    # unbiased = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_unbiased.npy',
    #                             year=f"{wcs.year}", mode=f"{wcs.mode}", version=f"{wcs.version}",
    #                             massbin=guess_massbins(wcs),
    #                             # massbin=config[(f'{wcs.mode}'.lower()[:2] if not 'MC' in f'{wcs.mode}' else f'{wcs.mode}'.split('_')[1].lower()[:2]) + "_mass_bins"],
    #                             massmodel=config[(f'{wcs.mode}'.lower()[:2] if not 'MC' in f'{wcs.mode}' else f'{wcs.mode}'.split('_')[1].lower()[:2]) + "_mass_model"]
    #                            ),
  output:
    root_file = temporal(SAMPLES+'/{year}/{mode}/{version}_{sweight}.root'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{sweight}/')
  params:
    script = 'selection/sweights/sweighter.py',
  log:
    'output/log/sweights_add/{year}/{mode}/{version}_{sweight}.log',
  run:
    sweights = input.sweights
    sweights = [sweights] if isinstance(sweights, str) else sweights
    # upars = input.unbiased
    # upars = [upars] if isinstance(upars,str) else upars
    shell(f"""(time\
    python {params.script} \
    --input-sample {input.root_file} \
    --output-sample {output.root_file} \
    --output-plots {output.plots} \
    --sweights {",".join(sweights)} \
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    ) &> {log}""")


rule sweights_add_lb:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  wildcard_constraints:
    mode = ".*(_fromLb|_Lb)"
  threads: 2
  resources:
    mem_mb=6000
  input:
    root_file = lambda wcs: tuples(wcs, weight='tagged'),
    # kplus = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_ipatiaChebyshev_all_kplus.npy',
    #                             year=f"{wcs.year}", mode=f"{wcs.mode}", version=f"{wcs.version}",
    #                            ),
    # kminus = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_ipatiaChebyshev_all_kminus.npy',
    #                             year=f"{wcs.year}", mode=f"{wcs.mode}", version=f"{wcs.version}",
    #                            ),
    sweights = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_ipatiaChebyshev_all_{kaon}.npy',
                                year=f"{wcs.year}", mode=f"{wcs.mode}", version=f"{wcs.version}",
                                kaon=['kplus', 'kminus']
                               ),
  output:
    root_file = temporal(SAMPLES+'/{year}/{mode}/{version}_sWeight.root'),
  params:
    script = 'selection/sweights/sweighter.py',
  log:
    'output/log/sweights_bs_rd/{year}/{mode}/{version}.log',
  run:
    # bpars = input.kplus
    # bpars = [bpars] if isinstance(bpars,str) else bpars
    # upars = input.kminus
    # upars = [upars] if isinstance(upars,str) else upars
    sweights = input.sweights
    sweights = [sweights] if isinstance(sweights, str) else sweights
    shell(f"""(time\
    python {params.script} \
    --input-sample {input.root_file} \
    --output-sample {output.root_file} \
    --sweights {",".join(sweights)} \
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    ) &> {log}""")

# }}}


# add Lb weights to Bs RD tuple {{{

if config['run_tagging']:
    rule lbweights_add:
        """Subtract the Lb background and create output file merged with provided Lb
        mc tuple in provided data tuple."""
        threads: 2
        resources:
            mem_mb=6000
        input:
            mcLb = lambda wcs: tuples(wcs, mode='MC_Bs2JpsiPhi_fromLb', weight='sWeight'),
            rdLb = lambda wcs: tuples(wcs, mode='Bs2JpsiPhi_Lb', weight='sWeight'),
            rd = lambda wcs: tuples(wcs, mode='Bs2JpsiPhi', weight='tagged'),
            # WARNING: version is hardcoded
            nLb = "analysis/params/lambda_b/{year}/v4r0.json"
        output:
            rd = temporal(SAMPLES+"/{year}/Bs2JpsiPhi/{version}_lbWeight.root"),
        params:
            script = 'selection/lb_add.py'
        log:
            'output/log/lbweights_add/{year}/Bs2JpsiPhi/{version}.log',
        run:
            # print(f"{output}")
            shell(f"""(time\
            python {params.script} \
            --mc-lb-input {input.mcLb} \
            --rd-lb-input {input.rdLb} \
            --rd-input {input.rd} \
            --number-of-lb {input.nLb} \
            --rd-output {output.rd} \
            --year {wildcards.year} \
            --version {wildcards.version} \
            ) &> {log}""")

# }}}


# vim: foldmethod=marker
