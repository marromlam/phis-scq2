# SWEIGHTS
#
#   Description: Background subtracted samples are required to perfrom fits to
#                the time-angular distribution of Bq mesons if the background
#                is not modelled. Within the whole phis-scq pipeline all fits
#                asume the samples are background subtracted. This set of rules
#                allow the user to compute sWeights for all the involved modes.
#                TODO: complete the following description:
#                * massmodel: This wildcard allows to use different mass models
#                      for any of the Bq modes.
#                * massbin: If 
#                      basically tell which kind of rules are run.
#
#        Author: Marcos Romero Lamas (mromerol@cern.ch)


# mass fitters for Bd {{{

rule mass_prefit_bd_mc:
  """
  Run mass fit on selected Bs0->J/psiPhi MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bd2JpsiKstar',
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
  output:
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    plots = directory('output/figures/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bd.py',
  log:
    'output/log/mass_prefit_bd_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    ) &> {log}""")


rule mass_fit_bd_mc:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bd2JpsiKstar',
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bd.py',
  log:
    'output/log/mass_fit_bd_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    ) &> {log}""")


rule mass_fit_bd_rd:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'Bd2JpsiKstar',
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
    params = 'output/params/mass_prefit/{year}/MC_{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bd.py',
  log:
    'output/log/mass_fit_bd_rd/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    ) &> {log}""")

# }}}


# mass fitters for Bu {{{

rule mass_prefit_bu_mc:
  """
  Run mass fit on selected Bs0->J/psiPhi MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bu2JpsiKplus',
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
  output:
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    plots = directory('output/figures/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bu.py',
  log:
    'output/log/mass_prefit_bu_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    ) &> {log}""")


rule mass_fit_bu_mc:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bu2JpsiKplus',
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bu.py',
  log:
    'output/log/mass_fit_bu_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    ) &> {log}""")


rule mass_fit_bu_rd:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'Bu2JpsiKplus',
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
    params = 'output/params/mass_prefit/{year}/MC_{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bu.py',
  log:
    'output/log/mass_fit_bu_rd/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    ) &> {log}""")

# }}}


# mass fitters for Bs {{{

rule mass_prefit_bs_mc:
  """
  Run mass fit on selected Bs0->J/psiPhi MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_(Bs2JpsiPhi(_dG0)?|Bs2JpsiKK_Swave)'
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
  output:
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    plots = directory('output/figures/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bs.py',
  log:
    'output/log/mass_prefit_bs_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-weight gb_weights \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    ) &> {log}""")


rule mass_fit_bs_mc:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_(Bs2JpsiPhi(_dG0)?|Bs2JpsiKK_Swave)'
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bs.py',
  log:
    'output/log/mass_fit_bs_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-weight gb_weights \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    --sweights {output.sweights} \
    ) &> {log}""")


rule mass_fit_bs_rd:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'Bs2JpsiPhi'
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped'),
    params = 'output/params/mass_prefit/{year}/MC_{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bs.py',
  log:
    'output/log/mass_bs_fit_rd/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-weight wLb \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --version {wildcards.version} \
    --sweights {output.sweights} \
    ) &> {log}""")

# }}}


# rules for Lb sWeights {{{

rule mass_fit_bs_lb:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = ".*(_fromLb|_Lb)",
    trigger = 'k(plus|minus)'
  input:
    root_file = lambda wcs: tuples(wcs, weight='tagged'),
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/lb.py',
  log:
    'output/log/mass_bs_lb/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --nosep {wildcards.trigger}\
    --mode {wildcards.mode} \
    --year {wildcards.year} \
    --sweights {output.sweights} \
    ) &> {log}""")

# }}}


# rules to produce sWeights  {{{

# TODO: Theseset of rules can be *obviously* be merged

def guess_massbins(wcs, version=False, mode=False):
    if not version:
        version = f"{wcs.version}"
    if not mode:
        mode = f"{wcs.mode}"

    if not 'MC' in mode:
        _mode = f'{wcs.mode}'.lower()[:2]
    else:
        _mode = f'{wcs.mode}'.split('_')[1].lower()[:2]
    # _mode = f'{wcs.mode}'.lower()[:2]

    mass_model = config[_mode  + "_mass_model"]
    v = version.split('@')
    if len(v) > 1:
        v, c = v
    else:
        v, c = v[0], False
    v = v.split('~')
    # print(v)
    if len(v) > 1:
        v, w = v
    else:
        v, w = v[0], False
    # print(v, w, c)
    if not w:
        w = 'mX6'

    # print(v, w, c)
    pattern = [
        "(mX(1|2|3|4|5|6))?",
        "(time(1|2|3|4))?",
        "(sigmam(1|2|3|4))?",
    ]
    pattern = rf"\A{''.join(pattern)}\Z"
    p = re.compile(pattern)
    try:
        q = p.search(w).groups()
        mX = int(q[1]) if q[0] else False
        time = int(q[3]) if q[2] else False
        sigmam = int(q[5]) if q[4] else False

        if mX:
            mX = [f'mX{i}' for i in range(1, mX+1)]
        else:
            mX = ['all']

        if time:
            time = [f'time{i}' for i in range(1, time+1)]
        else:
            time = ['']


        if sigmam:
            sigmam = [f'sigmam{i}' for i in range(1, sigmam+1)]
        else:
            sigmam = ['']

        caca = []
        for b1 in mX:
            for b2 in time:
                for b3 in sigmam:
                    caca.append(f"{b1}{b2}{b3}")
    except:
        raise ValueError(f'Cannot interpret {w} as a sWeight config')
    return caca


rule sweights_add:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  wildcard_constraints:
    mode = ".*((?!.*?(_fromLb|_Lb)).*)"
  threads: 2
  resources:
    mem_mb=6000
  input:
    root_file = lambda wcs: tuples(wcs, weight='chopped' if 'Bu' not in f'{wcs.mode}' else 'selected'),
    biased = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_biased.npy',
                                year=f"{wcs.year}", mode=f"{wcs.mode}", version=f"{wcs.version}",
                                massbin=guess_massbins(wcs),
                                massmodel=config[(f'{wcs.mode}'.lower()[:2] if not 'MC' in f'{wcs.mode}' else f'{wcs.mode}'.split('_')[1].lower()[:2]) + "_mass_model"]
                               ),
    unbiased = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_unbiased.npy',
                                year=f"{wcs.year}", mode=f"{wcs.mode}", version=f"{wcs.version}",
                                massbin=guess_massbins(wcs),
                                # massbin=config[(f'{wcs.mode}'.lower()[:2] if not 'MC' in f'{wcs.mode}' else f'{wcs.mode}'.split('_')[1].lower()[:2]) + "_mass_bins"],
                                massmodel=config[(f'{wcs.mode}'.lower()[:2] if not 'MC' in f'{wcs.mode}' else f'{wcs.mode}'.split('_')[1].lower()[:2]) + "_mass_model"]
                               ),
  output:
    root_file = SAMPLES+'/{year}/{mode}/{version}_sWeight.root',
  params:
    script = 'selection/sweights/sweighter.py',
  log:
    'output/log/sweights_bs_rd/{year}/{mode}/{version}.log',
  run:
    bpars = input.biased
    bpars = [bpars] if isinstance(bpars,str) else bpars
    upars = input.unbiased
    upars = [upars] if isinstance(upars,str) else upars
    shell(f"""(time\
    python {params.script} \
    --input-sample {input.root_file} \
    --output-sample {output.root_file} \
    --biased-weights {",".join(bpars)} \
    --unbiased-weights {",".join(upars)} \
    --mode {wildcards.mode} \
    ) &> {log}""")


rule sweights_add_lb:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  wildcard_constraints:
    mode = ".*(_fromLb|_Lb)"
  threads: 2
  resources:
    mem_mb=6000
  input:
    root_file = lambda wcs: tuples(wcs, weight='tagged'),
    kplus = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_ipatiaChebyshev_all_kplus.npy',
                                year=f"{wcs.year}", mode=f"{wcs.mode}", version=f"{wcs.version}",
                               ),
    kminus = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_ipatiaChebyshev_all_kminus.npy',
                                year=f"{wcs.year}", mode=f"{wcs.mode}", version=f"{wcs.version}",
                               ),
  output:
    root_file = temp(SAMPLES+'/{year}/{mode}/{version}_sWeight.root'),
  params:
    script = 'selection/sweights/sweighter.py',
  log:
    'output/log/sweights_bs_rd/{year}/{mode}/{version}.log',
  run:
    bpars = input.kplus
    bpars = [bpars] if isinstance(bpars,str) else bpars
    upars = input.kminus
    upars = [upars] if isinstance(upars,str) else upars
    shell(f"""(time\
    python {params.script} \
    --input-sample {input.root_file} \
    --output-sample {output.root_file} \
    --biased-weights {",".join(bpars)} \
    --unbiased-weights {",".join(upars)} \
    --mode {wildcards.mode} \
    ) &> {log}""")

# }}}


# add Lb weights to Bs RD tuple {{{

rule lbweights_add:
    """Subtract the Lb background and create output file merged with provided Lb
    mc tuple in provided data tuple."""
    input:
        mcLb = lambda wcs: tuples(wcs, mode='MC_Bs2JpsiPhi_fromLb', weight='sWeight'),
        rdLb = lambda wcs: tuples(wcs, mode='Bs2JpsiPhi_Lb', weight='sWeight'),
        rd = lambda wcs: tuples(wcs, mode='Bs2JpsiPhi', weight='tagged'),
        # WARNING: version is hardcoded
        nLb = "analysis/params/lambda_b/{year}/v1r0.json"
    output:
        rd = SAMPLES+"/{year}/Bs2JpsiPhi/{version}_lbWeight.root",
    params:
        script = 'selection/lb_add.py'
    log:
        'output/log/lbweights_add/{year}/Bs2JpsiPhi/{version}.log',
    run:
        # print(f"{output}")
        shell(f"""(time\
        python {params.script} \
        --mc-lb-input {input.mcLb} \
        --rd-lb-input {input.rdLb} \
        --rd-input {input.rd} \
        --number-of-lb {input.nLb} \
        --rd-output {output.rd} \
        --year {wildcards.year} \
        --version {wildcards.version} \
        ) &> {log}""")

# }}}


# vim: foldmethod=marker
