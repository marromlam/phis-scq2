

#ruleorder: blend_angular_acceptance > naive_angular_acceptance
#ruleorder: blend_angular_acceptance > corrected_binned_angular_acceptance
#ruleorder: blend_angular_acceptance > corrected_angular_acceptance

# naive angular acceptance - no correction (only sWeight and polWeight) --------
#     Here we have 2 rules to compute angular acceptance without correcting
#     MC samples. First rule computes angular acceptance for MC, and second one
#     merges MC results to compute RD angular acceptance
rule angular_acceptance_naive:
  wildcard_constraints:
    mode = "(TOY|MC)_Bs2JpsiPhi(_dG0)?"
  input:
    sample = lambda wcs: tuples(wcs),
  params:
    params = 'analysis/params/generator/{year}/{mode}.json'
  output:
    params = 'output/params/angular_acceptance/{year}/{mode}/{version}_naive_{trigger}.json',
    tables = 'output/tables/angular_acceptance/{year}/{mode}/{version}_naive_{trigger}.tex'
  log:
    'output/log/angular_acceptance_naive/{year}/{mode}/{version}_naive_{trigger}.log'
  run:
    shell(f"""(time\
    python analysis/angular_acceptance/naive.py\
           --sample {input.sample}\
           --input-params {params.params}\
           --output-params {output.params}\
           --output-tables {output.tables}\
           --year {wildcards.year}\
           --mode {wildcards.mode}\
           --version {wildcards.version}\
           --trigger {wildcards.trigger}
    ) &> {log} #2>&1""")
    send_mail(f"Naive Angular Acceptance :: {wildcards.version} {wildcards.year} {wildcards.mode} {wildcards.trigger}", f"{log}")



rule angular_acceptance_blend:
  wildcard_constraints:
    step = "(naive|corrected)",
    version = "^(v0r1)",
  input:
    weights_std = 'output/params/angular_acceptance/{year}/MC_Bs2JpsiPhi/{version}_{step}_{trigger}.json',
    weights_dg0 = 'output/params/angular_acceptance/{year}/MC_Bs2JpsiPhi_dG0/{version}_{step}_{trigger}.json',
  output:
    params = 'output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_{step}_{trigger}.json',
    tables = 'output/tables/angular_acceptance/{year}/Bs2JpsiPhi/{version}_{step}_{trigger}.tex'
  log:
    'output/log/angular_acceptance_blend/{year}/Bs2JpsiPhi/{version}_{step}_{trigger}.log'
  run:
    shell(f"""(time\
    python analysis/angular_acceptance/merge.py\
           --weights-std {input.weights_std}\
           --weights-dg0 {input.weights_dg0}\
           --output-params {output.params}\
           --output-tables {output.tables}\
           --year {wildcards.year}\
           --version {wildcards.version}\
           --trigger {wildcards.trigger}\
           --step {wildcards.step}\
    ) &> {log} #2>&1""")
    send_mail(f"Blend Angular Acceptance :: {wildcards.version} {wildcards.year} {wildcards.trigger}", f"{log}")




rule angular_acceptance_joinWeights:
  wildcard_constraints:
    wflag = "(angWeight|angWeightBin.*)"
  input:
    b = SAMPLES_PATH+'{year}/{mode}/{version}_{wflag}_biased.npy',
    u = SAMPLES_PATH+'{year}/{mode}/{version}_{wflag}_unbiased.npy'
  output:
     temp(SAMPLES_PATH+'{year}/{mode}/{version}_{wflag}.root')
  run:
    import uproot
    import numpy as np
    b = np.load(f"{input.b}")
    u = np.load(f"{input.u}")
    with uproot.recreate(f"{output}") as rfile:
      rfile['DecayTree'] = uproot.newtree({'kinWeight':np.float64})
      rfile['DecayTree'].extend({'kinWeight':b+u})
    rfile.close()


rule angular_acceptance_veronikaWeights:
  input:
    a = lambda wcs: tuples(wcs,weight='kkpWeight'),
    b = lambda wcs: tuples(wcs,weight='sWeight')
  output:
    SAMPLES_PATH+'{year}/{mode}/{version}_veronikaWeight.root'
  run:
    import uproot
    import numpy as np
    a = uproot.open(f"{input.a}")['DecayTree'].arrays()
    b = uproot.open(f"{input.b}")['DecayTree'].arrays()
    c = {**a,**b}
    with uproot.recreate(f"{output}") as rfile:
      rfile['DecayTree'] = uproot.newtree( {f'{k}':np.float64 for k in c.keys()} )
      rfile['DecayTree'].extend( {f'{k}':v for k,v in c.items()} )
    rfile.close()



# Correcting MC with kinematic weights -----------------------------------------
#     Correcting MC sample with kinematic weighting in B_P, B_PT and X_M helps
#     to better match MC to RD.

rule angular_acceptance_corrected:
  wildcard_constraints:
    mode = "MC_Bs2JpsiPhi(_dG0)?",
    trigger = "(biased|unbiased|combined)",
  input:
    sample_mc = lambda wcs: tuples(wcs),
    sample_rd = lambda wcs: tuples(wcs,mode='Bs2JpsiPhi'),
  params:
    params = 'analysis/params/generator/{year}/{mode}.json',
  output:
    params = 'output/params/angular_acceptance/{year}/{mode}/{version}_corrected_{trigger}.json',
    tables = 'output/tables/angular_acceptance/{year}/{mode}/{version}_corrected_{trigger}.tex',
    weight = temp(SAMPLES_PATH+'{year}/{mode}/{version}_angWeight_{trigger}.npy')
  log:
    'output/log/angular_acceptance_corrected/{year}/{mode}/{version}_corrected_{trigger}.log'
  run:
    shell(f"""(time\
    python analysis/angular_acceptance/corrected.py\
           --sample-mc {input.sample_mc}\
           --sample-data {input.sample_rd}\
           --input-params {params.params}\
           --output-params {output.params}\
           --output-tables {output.tables}\
           --output-weights-file {output.weight}\
           --mode {wildcards.mode}\
           --year {wildcards.year}\
           --version {wildcards.version}\
           --trigger {wildcards.trigger}\
    ) &> {log} #2>&1""")
    send_mail(f"Corrected Angular Acceptance :: {wildcards.version} {wildcards.year} {wildcards.mode} {wildcards.trigger}", f"{log}")

rule angular_acceptance_correctedBinned:
  wildcard_constraints:
    mode = "MC_Bs2JpsiPhi(_dG0)?",
    binnedvar = "(pt|sigmat|eta)",
    bin = "(1|2|3|4)"
  input:
    sample_mc = SAMPLES_PATH+'{year}/{mode}/{version}.root',
    sample_rd = SAMPLES_PATH+'{year}/Bs2JpsiPhi/{version}.root',
  params:
    params = 'analysis/params/generator/{year}/{mode}.json',
  output:
    params = 'output/params/angular_acceptance/{year}/{mode}/{version}_correctedBin{binnedvar}{bin}_{trigger}.json',
    tables = 'output/tables/angular_acceptance/{year}/{mode}/{version}_correctedBin{binnedvar}{bin}_{trigger}.tex',
    weight = temp(SAMPLES_PATH+'{year}/{mode}/{version}_angWeightBin{binnedvar}{bin}_{trigger}.npy')
  log:
    'output/log/angular_acceptance_corrected/{year}/{mode}/{version}_correctedBin{binnedvar}{bin}_{trigger}.log'
  run:
    shell(f"""(time\
    python analysis/angular_acceptance/corrected.py\
           --sample-mc {input.sample_mc}\
           --sample-data {input.sample_rd}\
           --input-params {params.params}\
           --output-params {output.params}\
           --output-tables {output.tables}\
           --output-weights-file {output.weight}\
           --mode {wildcards.mode}\
           --year {wildcards.year}\
           --version {wildcards.version}\
           --trigger {wildcards.trigger}\
           --binvar {wildcards.binnedvar}{wildcards.bin}\
    ) &> {log} #2>&1""")
    send_mail(f"Corrected Angular Acceptance :: {wildcards.version} {wildcards.year} {wildcards.mode} {wildcards.trigger}", f"{log}")




# Run2a angular acceptance ------------------------------------------------------
#     This rule runs the iterative procedure for all Run2 YEARS using both
#     MC and MC_dG0 files.
rule angular_acceptance_iterativeRun2a:
  wildcard_constraints:
    angacc = "run2a(shit)?"
  input:
    # Samples and weights
    sample_std = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi',year='Run2a'),
    sample_dG0 = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi_dG0',year='Run2a'),
    weights_std = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi',year='Run2a',weight=f'angWeight'),
    weights_dG0 = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi_dG0',year='Run2a',weight=f'angWeight'),
    sample_data = lambda wcs: tuples(wcs,mode='Bs2JpsiPhi',year='Run2a'),
    # Angular acceptance at corrected level
    angacc_biased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_corrected_biased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_corrected_biased.json'
    ],
    angacc_unbiased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_corrected_unbiased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_corrected_unbiased.json'
    ],
    # Time acceptance coefficients
    timeacc_biased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_{timeacc}_biased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_{timeacc}_biased.json'
    ],
    timeacc_unbiased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json'
    ],
    # CSP
    csp_factors = lambda wcs: [
      f'output/params/csp_factors/2015/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/csp_factors/2016/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ],
    # Time resolution
    time_resolution = lambda wcs: [
      f'output/params/time_resolution/2015/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/time_resolution/2016/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ],
    # Flavor tagging
    flavor = lambda wcs: [
      f'output/params/flavor_tagging/2015/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/flavor_tagging/2016/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ]
  params:
    params_std = [
      'analysis/params/generator/2015/MC_Bs2JpsiPhi.json', # WARNING
      'analysis/params/generator/2016/MC_Bs2JpsiPhi.json'], # WARNING
    params_dG0 = [
      'analysis/params/generator/2015/MC_Bs2JpsiPhi_dG0.json', # WARNING
      'analysis/params/generator/2016/MC_Bs2JpsiPhi_dG0.json'], # WARNING
  output:
    angacc_biased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json'
    ],
    angacc_unbiased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json'
    ],
    tables_biased = [
      'output/tables/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.tex',
      'output/tables/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.tex'
    ],
    tables_unbiased = [
      'output/tables/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.tex',
      'output/tables/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.tex'
    ],
    weights_std = [
      SAMPLES_PATH+'2015/MC_Bs2JpsiPhi/{version}_{angacc}_{timeacc}_kkpWeight.root',
      SAMPLES_PATH+'2016/MC_Bs2JpsiPhi/{version}_{angacc}_{timeacc}_kkpWeight.root'
    ],
    weights_dg0 = [
      SAMPLES_PATH+'2015/MC_Bs2JpsiPhi_dG0/{version}_{angacc}_{timeacc}_kkpWeight.root',
      SAMPLES_PATH+'2016/MC_Bs2JpsiPhi_dG0/{version}_{angacc}_{timeacc}_kkpWeight.root'
    ],
  log:
    'output/log/angular_acceptance_iterative/{angacc}/Bs2JpsiPhi/{version}_run2a_{timeacc}.log'
  run:
    shell(f"""(time\
    python analysis/angular_acceptance/iterative.py\
           --sample-mc-std           {",".join(input.sample_std)}\
           --sample-mc-dg0           {",".join(input.sample_dG0)}\
           --sample-data             {",".join(input.sample_data)}\
           --params-mc-std           {",".join(params.params_std)}\
           --params-mc-dg0           {",".join(params.params_dG0)}\
           --angular-weights-mc-std  {",".join(input.weights_std)}\
           --angular-weights-mc-dg0  {",".join(input.weights_dG0)}\
           --input-weights-biased    {",".join(input.angacc_biased)}\
           --input-weights-unbiased  {",".join(input.angacc_unbiased)}\
           --input-coeffs-biased     {",".join(input.timeacc_biased)}\
           --input-coeffs-unbiased   {",".join(input.timeacc_unbiased)}\
           --input-csp               {",".join(input.csp_factors)}\
           --input-time-resolution   {",".join(input.time_resolution)}\
           --input-flavor-tagging    {",".join(input.flavor)}\
           --output-weights-biased   {",".join(output.angacc_biased)}\
           --output-weights-unbiased {",".join(output.angacc_unbiased)}\
           --output-tables-biased    {",".join(output.tables_biased)}\
           --output-tables-unbiased  {",".join(output.tables_unbiased)}\
           --output-angular-weights-mc-std  {",".join(output.weights_std)}\
           --output-angular-weights-mc-dg0  {",".join(output.weights_dg0)}\
           --year                    {",".join(YEARS['Run2a'])}\
           --angacc                    '{cammel_parser(wildcards.timeacc)}'\
           --version                 {wildcards.version}\
    ) &> {log} #2>&1""")
    send_mail(f"Angular Acceptance :: Run2a :: {wildcards.timeacc}", f"{log}")









# Run2 angular acceptance ------------------------------------------------------
#     This rule runs the iterative procedure for all Run2 YEARS using both
#     MC and MC_dG0 files.

rule angular_acceptance_iterativeRun2:
  resources:
    mem_mb=16384
  threads: 16
  wildcard_constraints:
    angacc = "run2(shit)?"
  input:
    # Samples and weights
    sample_std = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi',year='Run2'),
    sample_dG0 = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi_dG0',year='Run2'),
    weights_std = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi',year='Run2',weight=f'angWeight'),
    weights_dG0 = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi_dG0',year='Run2',weight=f'angWeight'),
    sample_data = lambda wcs: tuples(wcs,mode='Bs2JpsiPhi',year='Run2'),
    # Angular acceptance at corrected level
    angacc_biased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_corrected_biased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_corrected_biased.json',
      'output/params/angular_acceptance/2017/Bs2JpsiPhi/{version}_corrected_biased.json',
      'output/params/angular_acceptance/2018/Bs2JpsiPhi/{version}_corrected_biased.json'
    ],
    angacc_unbiased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_corrected_unbiased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_corrected_unbiased.json',
      'output/params/angular_acceptance/2017/Bs2JpsiPhi/{version}_corrected_unbiased.json',
      'output/params/angular_acceptance/2018/Bs2JpsiPhi/{version}_corrected_unbiased.json'
    ],
    # Time acceptance coefficients
    timeacc_biased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_{timeacc}_biased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_{timeacc}_biased.json',
      'output/params/time_acceptance/2017/Bd2JpsiKstar/{version}_{timeacc}_biased.json',
      'output/params/time_acceptance/2018/Bd2JpsiKstar/{version}_{timeacc}_biased.json'
    ],
    timeacc_unbiased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json',
      'output/params/time_acceptance/2017/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json',
      'output/params/time_acceptance/2018/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json'
    ],
    # CSP
    csp_factors = lambda wcs: [
      f'output/params/csp_factors/2015/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/csp_factors/2016/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/csp_factors/2017/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/csp_factors/2018/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ],
    # Time resolution
    time_resolution = lambda wcs: [
      f'output/params/time_resolution/2015/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/time_resolution/2016/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/time_resolution/2017/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/time_resolution/2018/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ],
    # Flavor tagging
    flavor = lambda wcs: [
      f'output/params/flavor_tagging/2015/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/flavor_tagging/2016/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/flavor_tagging/2017/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/flavor_tagging/2018/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ]
  params:
    params_std = [
      'analysis/params/generator/2015/MC_Bs2JpsiPhi.json',
      'analysis/params/generator/2016/MC_Bs2JpsiPhi.json',
      'analysis/params/generator/2017/MC_Bs2JpsiPhi.json',
      'analysis/params/generator/2018/MC_Bs2JpsiPhi.json'
    ],
    params_dG0 = [
      'analysis/params/generator/2015/MC_Bs2JpsiPhi_dG0.json',
      'analysis/params/generator/2016/MC_Bs2JpsiPhi_dG0.json',
      'analysis/params/generator/2017/MC_Bs2JpsiPhi_dG0.json',
      'analysis/params/generator/2018/MC_Bs2JpsiPhi_dG0.json'
    ],
  output:
    angacc_biased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json',
      'output/params/angular_acceptance/2017/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json',
      'output/params/angular_acceptance/2018/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json'
    ],
    angacc_unbiased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json',
      'output/params/angular_acceptance/2017/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json',
      'output/params/angular_acceptance/2018/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json'
    ],
    tables_biased = [
      'output/tables/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.tex',
      'output/tables/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.tex',
      'output/tables/angular_acceptance/2017/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.tex',
      'output/tables/angular_acceptance/2018/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.tex'
    ],
    tables_unbiased = [
      'output/tables/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.tex',
      'output/tables/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.tex',
      'output/tables/angular_acceptance/2017/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.tex',
      'output/tables/angular_acceptance/2018/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.tex'
    ],
    weights_std = [
      SAMPLES_PATH+'2015/MC_Bs2JpsiPhi/{version}_{angacc}_{timeacc}_kkpWeight.root',
      SAMPLES_PATH+'2016/MC_Bs2JpsiPhi/{version}_{angacc}_{timeacc}_kkpWeight.root',
      SAMPLES_PATH+'2017/MC_Bs2JpsiPhi/{version}_{angacc}_{timeacc}_kkpWeight.root',
      SAMPLES_PATH+'2018/MC_Bs2JpsiPhi/{version}_{angacc}_{timeacc}_kkpWeight.root',
    ],
    weights_dg0 = [
      SAMPLES_PATH+'2015/MC_Bs2JpsiPhi_dG0/{version}_{angacc}_{timeacc}_kkpWeight.root',
      SAMPLES_PATH+'2016/MC_Bs2JpsiPhi_dG0/{version}_{angacc}_{timeacc}_kkpWeight.root',
      SAMPLES_PATH+'2017/MC_Bs2JpsiPhi_dG0/{version}_{angacc}_{timeacc}_kkpWeight.root',
      SAMPLES_PATH+'2018/MC_Bs2JpsiPhi_dG0/{version}_{angacc}_{timeacc}_kkpWeight.root',
    ],
  log:
    'output/log/angular_acceptance_iterative/{angacc}/Bs2JpsiPhi/{version}_base_{timeacc}.log'
  run:
    shell(f"""(time\
    python analysis/angular_acceptance/iterative.py\
           --sample-mc-std           {",".join(input.sample_std)}\
           --sample-mc-dg0           {",".join(input.sample_dG0)}\
           --sample-data             {",".join(input.sample_data)}\
           --params-mc-std           {",".join(params.params_std)}\
           --params-mc-dg0           {",".join(params.params_dG0)}\
           --angular-weights-mc-std  {",".join(input.weights_std)}\
           --angular-weights-mc-dg0  {",".join(input.weights_dG0)}\
           --input-weights-biased    {",".join(input.angacc_biased)}\
           --input-weights-unbiased  {",".join(input.angacc_unbiased)}\
           --input-coeffs-biased     {",".join(input.timeacc_biased)}\
           --input-coeffs-unbiased   {",".join(input.timeacc_unbiased)}\
           --input-csp               {",".join(input.csp_factors)}\
           --input-time-resolution   {",".join(input.time_resolution)}\
           --input-flavor-tagging    {",".join(input.flavor)}\
           --output-weights-biased   {",".join(output.angacc_biased)}\
           --output-weights-unbiased {",".join(output.angacc_unbiased)}\
           --output-tables-biased    {",".join(output.tables_biased)}\
           --output-tables-unbiased  {",".join(output.tables_unbiased)}\
           --output-angular-weights-mc-std  {",".join(output.weights_std)}\
           --output-angular-weights-mc-dg0  {",".join(output.weights_dg0)}\
           --year                    {",".join(YEARS['Run2'])}\
           --angacc                  {wildcards.angacc}_{wildcards.timeacc}\
           --version                 {wildcards.version}\
    ) &> {log} #2>&1""")
    send_mail(f"Angular Acceptance :: Run2 :: {wildcards.timeacc}", f"{log}")



# Yearly angular acceptance ------------------------------------------------------
#     This rule runs the iterative procedure for only one year using both
#     MC and MC_dG0 files.
rule angular_acceptance_iterativeYearly:
  wildcard_constraints:
    year = "\d{4}",
    angacc = "yearly(shit)?"
  input:
    sample_std = lambda wcs: [tuples(wcs,mode='MC_Bs2JpsiPhi')],
    sample_dG0 = lambda wcs: [tuples(wcs,mode='MC_Bs2JpsiPhi_dG0')],
    weights_std = lambda wcs: [tuples(wcs,mode='MC_Bs2JpsiPhi',weight=f'angWeight')],
    weights_dG0 = lambda wcs: [tuples(wcs,mode='MC_Bs2JpsiPhi_dG0',weight=f'angWeight')],
    sample_data = lambda wcs: [tuples(wcs,mode='Bs2JpsiPhi')],
    # Angular acceptance at corrected level
    angacc_biased = [
      'output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_corrected_biased.json'
    ],
    angacc_unbiased = [
      'output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_corrected_unbiased.json'
    ],
    # Time acceptance coefficients
    timeacc_biased = [
      'output/params/time_acceptance/{year}/Bd2JpsiKstar/{version}_{timeacc}_biased.json'
    ],
    timeacc_unbiased = [
      'output/params/time_acceptance/{year}/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json'
    ],
    # CSP
    csp_factors = [
      'output/params/csp_factors/{year}/Bs2JpsiPhi/{version}.json'
    ],
    # Time resolution
    time_resolution = [
      'output/params/time_resolution/{year}/Bs2JpsiPhi/{version}.json'
    ],
    # Flavor tagging
    flavor = [
      'output/params/flavor_tagging/{year}/Bs2JpsiPhi/{version}.json'
    ]
  params:
    params_std = [
      'analysis/params/generator/{year}/MC_Bs2JpsiPhi.json'
    ],
    params_dG0 = [
      'analysis/params/generator/{year}/MC_Bs2JpsiPhi_dG0.json'
    ],
  output:
    angacc_biased   = [
      'output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json'
    ],
    angacc_unbiased = [
      'output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json'
    ],
    tables_biased   = [
      'output/tables/angular_acceptance/{year}/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json'
    ],
    tables_unbiased = [
      'output/tables/angular_acceptance/{year}/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json'
    ],
    weights_std = [
      SAMPLES_PATH+'{year}/MC_Bs2JpsiPhi/{version}_{angacc}_{timeacc}_kkpWeight.root'
    ],
    weights_dg0 = [
      SAMPLES_PATH+'{year}/MC_Bs2JpsiPhi_dG0/{version}_{angacc}_{timeacc}_kkpWeight.root'
    ],
  log:
    'output/log/angular_acceptance_iterative/{year}/Bs2JpsiPhi/{version}_{angacc}_{timeacc}.log'
  run:
    shell(f"""(time\
    python analysis/angular_acceptance/iterative.py\
           --sample-mc-std                  {",".join(input.sample_std)}\
           --sample-mc-dg0                  {",".join(input.sample_dG0)}\
           --sample-data                    {",".join(input.sample_data)}\
           --params-mc-std                  {",".join(params.params_std)}\
           --params-mc-dg0                  {",".join(params.params_dG0)}\
           --angular-weights-mc-std         {",".join(input.weights_std)}\
           --angular-weights-mc-dg0         {",".join(input.weights_dG0)}\
           --input-weights-biased           {",".join(input.angacc_biased)}\
           --input-weights-unbiased         {",".join(input.angacc_unbiased)}\
           --input-coeffs-biased            {",".join(input.timeacc_biased)}\
           --input-coeffs-unbiased          {",".join(input.timeacc_unbiased)}\
           --input-csp                      {",".join(input.csp_factors)}\
           --input-time-resolution          {",".join(input.time_resolution)}\
           --input-flavor-tagging           {",".join(input.flavor)}\
           --output-weights-biased          {",".join(output.angacc_biased)}\
           --output-weights-unbiased        {",".join(output.angacc_unbiased)}\
           --output-tables-biased           {",".join(output.tables_biased)}\
           --output-tables-unbiased         {",".join(output.tables_unbiased)}\
           --output-angular-weights-mc-std  {",".join(output.weights_std)}\
           --output-angular-weights-mc-dg0  {",".join(output.weights_dg0)}\
           --year                           {",".join([wildcards.year])}\
           --angacc                           '{cammel_parser(wildcards.timeacc)}'\
           --version                        {wildcards.version}\
    ) &> {log} #2>&1""")
    send_mail(f"Angular Acceptance :: {wildcards.year} :: {wildcards.timeacc}", f"{log}")


rule angular_acceptance_compareCuts:
  input:
    params = lambda wcs: [f'output/params/angular_acceptance/{wcs.year}/{wcs.mode}/{wcs.version}_{wcs.angacc}_{wcs.timeacc}_{wcs.trigger}.json'] + [f'output/params/angular_acceptance/{wcs.year}/{wcs.mode}/{wcs.version}_{wcs.angacc}_{wcs.timeacc}{wcs.variable}{i}_{wcs.trigger}.json' for i in range(1,5 if f'{wcs.variable}'=='Binpt' else 4)]
  output:
    'output/figures/angular_acceptance/{year}/{mode}/{version}_{angacc}_{timeacc}_{trigger}_{variable}.pdf',
  log:
    'output/log/angular_acceptance_plot/{year}/{mode}/{version}_{angacc}_{timeacc}_{trigger}_{variable}.log'
  run:
    shell(f"""(time\
    python analysis/angular_acceptance/plot_binned_weights.py\
           --params {",".join(input.params)}\
           --figure {output}\
           --mode {wildcards.mode}\
           --version {wildcards.version}\
           --trigger {wildcards.trigger}\
           --year {wildcards.year}\
           --variable {wildcards.variable}\
    ) &> {log} #2>&1""")
    send_mail(f"Angular Acceptance :: Plot comparison binned variables cuts :: {wildcards.year} :: {wildcards.mode} :: {wildcards.version} :: {wildcards.variable}", f"{log}", [f"{output}"])
