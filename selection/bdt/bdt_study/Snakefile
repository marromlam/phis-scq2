rule selection_add_bdt_response:
    """
    Generic rule.
    Read tmva weights from given file and fill in response for a given tree.
    NO cut on the bdt response applied yet.
    NOTE the name of the bdt is hard coded in the script to be bdtg3

    """
    threads: 2
    resources:
        mem_mb = 12000
    input:
        tuple_file = SAMPLES + '/{year}/{mode}/{version}_withbdt.root',
        tmva_weight_dir = tmva_weights_file,
    params:
        script = 'selection/tools/apply_bdt_selection.py',
        bdt_cut = 'selection/bdt/bdt_study/bdtcut_off.yaml',
        branches = 'selection/bdt/branches.yaml',
    output:
        SAMPLES + '/{year}/{mode}/{version}_bdt_response.root'
    log:
        'output/log/selection_add_bdt_response/{year}/{mode}/{version}.log'
    run:
        shell('(time python {params.script} \
        --input-file {input.tuple_file} \
        --output-file {output} \
        --mode {wildcards.mode} \
        --year {wildcards.year} \
        --bdt-branches {params.branches} \
        --bdt-cut-file {params.bdt_cut} \
        --tmva-weight-dir {input.tmva_weight_dir} \
        ) &> {log}')


rule selection_bdt_cut_optimization:
    """
    Generic rule.
    Fit to B_ConstJpsi_M_1 with different cut on bdtg3 to obtain the rough
    sweight to define FOM=(sum_w)^2/sum_(w^2) and find the best bdtg3 cut with
    largest FOM

    TODO: Generalize for Bu tuples too
    """
    threads: 2
    resources:
        mem_mb = 12000
    wildcard_constraints:
        mode = '(Bu2JpsiKplus|Bs2JpsiPhi)'
    input:
        tuple_file = SAMPLES + '/{year}/{mode}/{version}_bdt_response.root',
        pars = 'output/params/tails_mc/{year}/MC_{mode}/{version}.json',
        # tuple_file = expand(rules.add_bdt_response.output, version='{version}',
        #                     year='{year}', mode='{mode}'),
    params:
        script = 'selection/bdt/optimize_bdt_cut.py',
        branch_name = 'B_ConstJpsi_M_1',
    output:
        cut = 'output/params/bdt_cut/{year}/{mode}/{version}.json',
        plots = directory('output/figures/bdt_cut/{year}/{mode}/{version}/')
    log:
        'output/log/selection_bdt_cut_optimization/{year}/{year}/{mode}/{version}.log'
    run:
        shell(f'mkdir -p {output.plots}')
        shell('(time python {params.script} \
        --input-file {input.tuple_file} \
        --input-branch {params.branch_name} \
        --input-params {input.pars} \
        --output-figures {output.plots} \
        --output-file {output.cut} \
        --mode {wildcards.mode} \
        --year {wildcards.year} \
        ) &> {log}')


# vim: fdm=marker:cc=120
