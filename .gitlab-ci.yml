stages:
  - build # create environment
  - test # test environment and run one snakemake rule
  - download
  - deploy # run the complete analysis
  


# activatephisscq ##############################################################
#     This before_script key aims to reproduce the behavior of the homonymous
#     bash function created by utils/install.sh. 

before_script:
    # Copy original utils/default.json as will be done by utils/install.sh
    - cp .ci/user.json config/user.json
    # Activate conda phisscq environment
    - source .ccache/conda3/bin/activate
    - conda activate phisscqNew
    - export PYTHONPATH=$PWD:$PYTHONPATH # add phi-scq folder to $PYTHONPATH
    # Use opencl as default (it's slower than cuda, but it runs on more devices)
    - export IPANEMA_BACKEND='opencl'
    - export PYOPENCL_COMPILER_OUTPUT=1
    - export PYOPENCL_NO_CACHE=1
    # provide kerberos conf file
    - export KRB5_CONFIG="$PWD/.ci/krb5.conf"
    # bypass kerberos sending password
    - echo "$SERVICE_PASS" | base64 -d | kinit mromerol@CERN.CH
    # bypass kerberos sending keytab
    #- if [ -z ${ENCODED_KEYTAB+x} ]; then echo "ENCODED_KEYTAB not set. EOS access will not be possible."; else echo "EOS access granted" && echo "$ENCODED_KEYTAB" | base64 -d > ap.keytab && kinit mromerol@CERN.CH -k -t ap.keytab && rm ap.keytab; fi
    - klist # check if we have generated the ticket

################################################################################



# Setup Environment ############################################################
#     This stage installs miniconda3 and prepares the environment phisscq to run
#     the full stack of code of this repository. Basically it reproduces the
#     install instructions utils/install.sh will perform.
#
#     only triggered when changing utils/install.sh  

Setup Environment:
  stage: build
  before_script:
    - ls -larth
  script:
    - rm -rf .ccache sidecar tmp
    - mkdir -p .ccache sidecar
    - wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O .ccache/miniconda.sh
    - bash .ccache/miniconda.sh -b -s -f -p .ccache/conda3
    - source .ccache/conda3/bin/activate
    - conda env create -f .ci/environment.yml
    - conda activate phisscqNew
    - pip install -r .ci/requirements.txt
  cache:
    key: build_cache_${CI_COMMIT_REF_SLUG}
    paths:
      - .ccache
  only:
    changes:
      - .ci/user.json
      - .ci/install_wizard.sh
      # - .gitlab-ci.yml
  artifacts:
    paths:
      - sidecar
      - tmp
    expire_in: 1 year

################################################################################




# Test Environment #############################################################
#     This stage tests the correct setup of miniconda, ipanema, xrootd and
#     snakemake. Testing these packages ensures a proper environment, although
#     the full analysis can fail for other reasons.
#
#     always triggered 

Test Environment:
  stage: test
  script:
    - ls .ccache
    - python -c "import ipanema"
    - python -c "from ipanema import initialize; initialize('opencl',1)"
    - xrdfs root://eoslhcb.cern.ch/ ls /eos
  cache:
    key: build_cache_${CI_COMMIT_REF_SLUG}
    paths:
      - .ccache
    policy: pull


Test Snakemake:
  stage: test
  script:
    - snakemake sidecar/2015/Bd2JpsiKstar/v0r5_sWeight.root -j -f
  cache:
    key: build_cache_${CI_COMMIT_REF_SLUG}
    paths:
      - .ccache
    policy: pull

################################################################################



# Run analysis #################################################################

Sync Tuples:
  stage: download
  script:
    - snakemake sidecar/201{5,6,7,8}/{Bd2JpsiKstar,Bs2JpsiPhi,MC_Bd2JpsiKstar,MC_Bs2JpsiPhi,MC_Bs2JpsiPhi_dG0}/v0r5.root -j -f
  artifacts:
    paths:
      - output
      - sidecar
    expire_in: 1 year
    when: always
  cache:
    key: build_cache_${CI_COMMIT_REF_SLUG}
    paths:
      - .ccache
    policy: pull
  only:
    - merge_requests
  except:
    variables:
      - $CI_MERGE_REQUEST_TITLE =~ /^WIP:.*/



Repository Parameters:
  stage: download
  script:
    - snakemake output/params/{csp_factors,time_resolution,flavor_tagging}/201{5,6,7,8}/Bs2JpsiPhi/v0r5.json -j -f
  artifacts:
    paths:
      - output
      - sidecar
    expire_in: 1 year
    when: always
  cache:
    key: build_cache_${CI_COMMIT_REF_SLUG}
    paths:
      - .ccache
    policy: pull
  only:
    - merge_requests
  except:
    variables:
      - $CI_MERGE_REQUEST_TITLE =~ /^WIP:.*/



Run Analysis:
  stage: deploy
  dependencies:
    - "Sync Tuples"
    - "Repository Parameters"
  script:
    - snakemake output/params/angular_fit/run2/Bs2JpsiPhi/v0r5_run2_run2_simul.json -j -f
  artifacts:
    paths:
      - output
      - sidecar
    expire_in: 1 year
    when: always
  cache:
    key: build_cache_${CI_COMMIT_REF_SLUG}
    paths:
      - .ccache
    policy: pull
  only:
    - merge_requests
  except:
    variables:
      - $CI_MERGE_REQUEST_TITLE =~ /^WIP:.*/


################################################################################


pages:
  stage: build
  script:
  - ls -larth
  - pip install sphinx
  - cd docs && make clean && make html
  artifacts:
    paths:
    - public
  cache:
    key: build_cache_${CI_COMMIT_REF_SLUG}
    paths:
      - .ccache
    policy: pull

