# sync_ntuples ----------------------------------------------------------------
#    This rule downloads all files corresponding to a given VERSION from EOS
#    to SAMPLES_PATH folder. It requires you to make a kinit on your system,
#    and then it worka automatically.

rule samples_sync_tuple:
  resources:
    mem_mb=6144
  output:
    sample = temp(SAMPLES_PATH+'{year}/{mode}/{version}_sWeight.root')
  log:
    'output/log/samples_sync_tuple/{year}/{mode}/{version}.log'
  run:
    try:
      shell(f"""
        (time\
        python analysis/samples/sync_tuples.py\
               --year {wildcards.year}\
               --mode {wildcards.mode}\
               --version {wildcards.version}\
               --tree DecayTree\
               --output {output}\
        ) &> {log}""")
    except:
      print("These tuples are not yet avaliable at root://eoslhcb.cern.ch/*.",
      'You may need to create those tuples yourself or ask B2CC people to'
      'produce them')



# reduce_ntuples ---------------------------------------------------------------
#    Reduces the amount of branches in the original ntuples. This rule builds
#    the ntuples that will actually be used for phis-scq analysis package.

rule samples_reduce_tuple:
  wildcard_constraints:
    mode = "(MC_)?(Bs2JpsiPhi|Bd2JpsiKstar|Bu2JpsiKplus)(_dG0)?"
  resources:
    mem_mb=2048
  input:
    sample = lambda wcs: tuples(wcs, weight='kinWeight')
  output:
    sample = SAMPLES_PATH+'{year}/{mode}/{version,[A-Za-z0-9]+}.root'
  log:
    'output/log/samples_reduce_tuple/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
    python analysis/samples/reduce_tuples.py\
           --input-file {input.sample}\
           --output-file {output.sample}\
           --input-tree DecayTree\
           --output-tree DecayTree\
    ) &> {log}""")

# samples plot------------------------------------------------------------------
#   plot of differents branches of the ntuples. this rule get the plots for
#   the years with no corrections, sw and kinematic corrections (MC vs data)

rule plot_samples:
  resources:
    mem_mb=1024
  wildcard_constraints:
    mode = "(TOY_|MC_)?(Bs2JpsiPhi|Bd2JpsiKstar)(_dG0)?",
    branch = "(pTB|pB|pTHp|pHp|pTHm|pHm|etaB|mHH|logIPchi2B|BDTFchi2|logMINkPNNk|BVXchi2|pTX|KmaxTRchi2|MUmaxTRchi2|logJpsiVXchi2|logMINmuPNNmu)",
    year = 'run2'
  input:
    tuple = lambda wcs: tuples(wcs, mode='cdata', year='run2'),
    control = lambda wcs: tuples(wcs, year='run2')
  output:
    'output/samples/figures/{year}/{mode}/{version}_{branch}.pdf',
    'output/samples/figures/{year}/{mode}/{version}_{branch}_sw.pdf',
    'output/samples/figures/{year}/{mode}/{version}_{branch}_rw.pdf'
  log:
    'output/log/samples/{year}/{mode}/{version}_{branch}.log',
  run:
    shell(f"""(time\
    python analysis/samples/plot.py\
           --tuple {",".join(input.tuple)}\
           --control {",".join(input.control)}\
           --year {",".join(YEARS['Run2'])}\
           --version {wildcards.version}\
           --mode {wildcards.mode}\
           --branch {wildcards.branch}\
           --output {",".join(output)}\
    ) #&> {log}""")
    send_mail(f"Samples plot :: {wildcards}", f"{log}", f"{output}".split(' '))
