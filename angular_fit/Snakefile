
# TODO:
# Rename some files to avout this rule ordering
ruleorder: parse_fulljson > get_csp_from_git
ruleorder: parse_fulljson > get_resolution_from_git
ruleorder: parse_fulljson > get_flavor_from_git

# this rule must be moved elsewhere at some point
#     Donwload fit_inputs_{year} from the repository to tmp folder
rule download_fulljson:
  output:
    "tmp/{version}/fit_inputs_{year}.json"
  run:
    from bundle.parse_full_json import download_fulljson
    download_fulljson(f"{wildcards.version}", f"{wildcards.year}")


# this rule must be moved elsewhere at some point
#     Get fulljson file and parse it to work with phis-scq
rule parse_fulljson:
  input:
    "tmp/{version}/fit_inputs_{year}.json"
  output:
    timeacc_biased = "output/params/time_acceptance/{year}/Bd2JpsiKstar/{version}_Repo_biased.json",
    timeacc_unbiased = "output/params/time_acceptance/{year}/Bd2JpsiKstar/{version}_Repo_unbiased.json",
    angacc_biased = "output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_Repo_biased.json",
    angacc_unbiased = "output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_Repo_unbiased.json",
    flavor = "output/params/flavor_tagging/{year}/Bs2JpsiPhi/{version}.json",
    resolution = "output/params/time_resolution/{year}/Bs2JpsiPhi/{version}.json",
    csp_factors = "output/params/csp_factors/{year}/Bs2JpsiPhi/{version}.json"
  run:
    from bundle.parse_full_json import parse_fulljson
    # parse
    tb, tu, ab, au, r, f, c = parse_fulljson(f"{input}")
    # dump
    tb.dump(f"{output.timeacc_biased}")
    tu.dump(f"{output.timeacc_unbiased}")
    ab.dump(f"{output.angacc_biased}")
    au.dump(f"{output.angacc_unbiased}")
    r.dump(f"{output.resolution}")
    f.dump(f"{output.flavor}")
    c.dump(f"{output.csp_factors}")

# -----------------------------------------------------
# -----------------------------------------------------
# -----------------------------------------------------
# -----------------------------------------------------




# Run2a angular acceptance -----------------------------------------------------
#     This rule runs the iterative procedure for Run2a years (2015&2016) using
#     both MC and MC_dG0 files.
rule physics_params_Run2aRepo:
  input:
    samples = lambda wcs: tuples(wcs,mode='Bs2JpsiPhi',year='Run2a'),
    # Angular acceptance
    angacc_biased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_Repo_biased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_Repo_biased.json'
    ],
    angacc_unbiased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_Repo_unbiased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_Repo_unbiased.json'
    ],
    # Time acceptance coefficients
    timeacc_biased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_Repo_biased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_Repo_biased.json'
    ],
    timeacc_unbiased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_Repo_unbiased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_Repo_unbiased.json'
    ],
    # CSP
    csp_factors = [
      'output/params/csp_factors/2015/Bs2JpsiPhi/{version}.json',
      'output/params/csp_factors/2016/Bs2JpsiPhi/{version}.json'
    ],
    # Time resolution
    time_resolution = [
      'output/params/time_resolution/2015/Bs2JpsiPhi/{version}.json',
      'output/params/time_resolution/2016/Bs2JpsiPhi/{version}.json'
    ],
    # Flavor tagging
    flavor = [
      'output/params/flavor_tagging/2015/Bs2JpsiPhi/{version}.json',
      'output/params/flavor_tagging/2016/Bs2JpsiPhi/{version}.json'
    ],
  output:
    params = 'output/params/angular_fit/Run2a/Bs2JpsiPhi/{version}_Run2aRepo.json'
  log:
    'output/log/angular_acceptance/physics_params_Run2a/Run2aRepo/Bs2JpsiPhi/{version}.log'
  run:
    shell(f"""(time\
    python angular_fit/fit_test_data.py\
           --samples                 {",".join(input.samples)}\
           --angacc-biased           {",".join(input.angacc_biased)}\
           --angacc-unbiased         {",".join(input.angacc_unbiased)}\
           --timeacc-biased          {",".join(input.timeacc_biased)}\
           --timeacc-unbiased        {",".join(input.timeacc_unbiased)}\
           --csp                     {",".join(input.csp_factors)}\
           --time-resolution         {",".join(input.time_resolution)}\
           --flavor-tagging         {",".join(input.flavor)}\
           --params                  {output.params}\
           --year                    {",".join(yd['Run2a'])}\
           --version                 {wildcards.version}\
    ) &> {log} #2>&1""")
    send_mail(f"Run2aRepo Fit", f"{log}")




# Run2a angular acceptance -----------------------------------------------------
#     This rule runs the iterative procedure for Run2a years (2015&2016) using
#     both MC and MC_dG0 files.
rule physics_params_Run2a:
  input:
    samples = lambda wcs: tuples(wcs,mode='Bs2JpsiPhi',year='Run2a'),
    # Angular acceptance
    angacc_biased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_Run2aBaseline_biased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_Run2aBaseline_biased.json'
    ],
    angacc_unbiased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_Run2aBaseline_unbiased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_Run2aBaseline_unbiased.json'
    ],
    # Time acceptance coefficients
    timeacc_biased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_Baseline_biased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_Baseline_biased.json'
    ],
    timeacc_unbiased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_Baseline_unbiased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_Baseline_unbiased.json'
    ],
    # CSP
    csp_factors = [
      'output/params/csp_factors/2015/Bs2JpsiPhi/{version}.json',
      'output/params/csp_factors/2016/Bs2JpsiPhi/{version}.json'
    ],
    # Time resolution
    time_resolution = [
      'output/params/time_resolution/2015/Bs2JpsiPhi/{version}.json',
      'output/params/time_resolution/2016/Bs2JpsiPhi/{version}.json'
    ],
    # Flavor tagging
    flavor = [
      'output/params/flavor_tagging/2015/Bs2JpsiPhi/{version}.json',
      'output/params/flavor_tagging/2016/Bs2JpsiPhi/{version}.json'
    ],
  output:
    params = 'output/params/angular_fit/Run2a/Bs2JpsiPhi/{version}_Run2aBase.json'
  log:
    'output/log/angular_acceptance/physics_params_Run2a/Run2a/Bs2JpsiPhi/{version}.log'
  run:
    shell(f"""(time\
    python angular_fit/fit_test_data.py\
           --samples                 {",".join(input.samples)}\
           --angacc-biased           {",".join(input.angacc_biased)}\
           --angacc-unbiased         {",".join(input.angacc_unbiased)}\
           --timeacc-biased          {",".join(input.timeacc_biased)}\
           --timeacc-unbiased        {",".join(input.timeacc_unbiased)}\
           --csp                     {",".join(input.csp_factors)}\
           --time-resolution         {",".join(input.time_resolution)}\
           --flavor-tagging         {",".join(input.flavor)}\
           --params                  {output.params}\
           --year                    {",".join(yd['Run2a'])}\
           --version                 {wildcards.version}\
    ) &> {log} #2>&1""")
    send_mail(f"Run2a Fit", f"{log}")
