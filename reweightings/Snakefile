# reweightings -----------------------------------------------------------------
#    Reduces the amount of branches in the original ntuples. This rule builds
#    the ntuples that will actually be used for phis-scq analysis package. .split('_')[1],



# polarity weighting -----------------------------------------------------------
#    Adds polWeight to MC tuples matching the corresponding data sample. This
#    rule runs only over MC tuples.
rule polarity_weighting:
  wildcard_constraints:
    mode = "MC_(Bs2JpsiPhi|Bd2JpsiKstar)(_dG0)?"
  input:
    original = lambda wcs: tuples(wcs,weight='sWeight'),
    target   = lambda wcs: tuples(wcs,mode='Bs2JpsiPhi',weight='sWeight'),
  output:
    sample   = SAMPLES_PATH+'{year}/{mode}/{version}_polWeight.root'
  log:
    'output/log/reweightings/polarity_weighting/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
          python reweightings/polarity_weighting.py\
                 --original-file {input.original}\
                 --original-treename DecayTree\
                 --target-file {input.target}\
                 --target-treename DecayTree\
                 --output-file {output.sample}
    ) &> {log} #2>&1""")
    send_mail(f"Polarity weighting", f"{log}")



# p.d.f. weighting -------------------------------------------------------------
#    Adds pdfWeight to MC tuples matching the corresponding data sample. This
#    rule runs only over MC tuples.
rule pdf_weighting:
  wildcard_constraints:
    mode = "MC_(Bs2JpsiPhi|Bd2JpsiKstar)(_dG0)?"
  input:
    sample = lambda wcs: tuples(wcs,weight='polWeight'),
  params:
    original = lambda wcs: f"{wcs.mode[3:].split('_')[0]}_2016.json",
    target = '{mode}_2016.json'
  output:
    sample = SAMPLES_PATH+'{year}/{mode}/{version}_pdfWeight.root'
  log:
    'output/log/reweightings/pdf_weighting/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
      python reweightings/pdf_weighting.py\
             --input-file {input.sample}\
             --tree-name DecayTree\
             --output-file {output.sample}\
             --target-params reweightings/parameters/{params.target}\
             --original-params reweightings/parameters/{params.original}\
             --mode {wildcards.mode}
    ) &> {log} #2>&1""")
    send_mail(f"P.D.F. weighting", f"{log}")



# kinematic weighting ----------------------------------------------------------
#    Adds kinWeight to MC_BsJpsiPhi*, MC_BdJpsiKstar and Bd2JpsiKstar tuples
#    gb-weighting them to match kinematic distributions of their complementary
#    sample.
rule kinematic_weighting:
  wildcard_constraints:
    mode = "(MC_(Bs2JpsiPhi|Bd2JpsiKstar)(_dG0|_Swave)?|Bd2JpsiKstar)"
  input:
    original = lambda wcs: tuples(wcs,weight='pdfWeight'),
    target = lambda wcs: tuples(wcs,mode='cdata',weight='kinWeight'),
  output:
    sample = SAMPLES_PATH+'{year}/{mode}/{version}_kinWeight.root'
  log:
    'output/log/reweightings/kinematic_weighting/{year}/{mode}/{version}.log'
  run:
    import os
    year = f'{wildcards.year}'
    mode = f'{wildcards.mode}'
    version = f'{wildcards.version}'
    end  = 'selected_bdt_sw'
    if mode.startswith('MC_Bs2JpsiPhi'):
      shell(f"""(time\
        python reweightings/kinematic_weighting.py\
          --original-file {input.original}\
          --original-treename DecayTree\
          --original-vars "B_PT X_M" \
          --original-weight "(sw/gb_weights)*polWeight*pdfWeight"\
          --target-file {input.target}\
          --target-treename DecayTree\
          --target-vars "B_PT X_M"\
          --target-weight "sw"\
          --output-file {output.sample}\
          --n-estimators 20\
          --learning-rate 0.3\
          --max-depth 3\
          --min-samples-leaf 1000
      ) &> {log} #2>&1""")
    elif mode.startswith('MC_Bd2JpsiKstar'):
      shell(f"""(time\
        python reweightings/kinematic_weighting.py\
          --original-file {input.original}\
          --original-treename DecayTree\
          --original-vars "B_PT X_M" \
          --original-weight "sw*polWeight*pdfWeight"\
          --target-file {input.target}\
          --target-treename DecayTree\
          --target-vars "B_PT X_M"\
          --target-weight "sw*kinWeight"\
          --output-file {output.sample}\
          --n-estimators 20\
          --learning-rate 0.3\
          --max-depth 3\
          --min-samples-leaf 1000
      ) &> {log} #2>&1""")
    elif mode.startswith('Bd2JpsiKstar'):
      shell(f"""(time\
        python reweightings/kinematic_weighting.py\
          --original-file {input.original}\
          --original-treename DecayTree\
          --original-vars "B_PT B_P" \
          --original-weight "sw"\
          --target-file {input.target}\
          --target-treename DecayTree\
          --target-vars "B_PT B_P"\
          --target-weight "sw"\
          --output-file {output.sample}\
          --n-estimators 20\
          --learning-rate 0.3\
          --max-depth 3\
          --min-samples-leaf 1000
      ) &> {log} #2>&1""")
    else:
      shell(f"""(time\
        cp {input.original} {output.sample}
      ) &> {log} #2>&1""")
    send_mail(f"Kinematic weighting", f"{log}")






rule plot_time_acceptance_reweightings:
  input:
    original = lambda wcs: tuples(wcs),
    target = lambda wcs: tuples(wcs,mode='cdata')
  output:
    sweighted = 'output/figures/reweightings/{year}/{mode}/{version,[A-Za-z0-9]+}_{branch}_sWeight.pdf',
    kinweighted = 'output/figures/reweightings/{year}/{mode}/{version}_{branch}_kinWeight.pdf',
  log:
    'output/log/reweightings/plot_time_reweightings/{year}/{mode}/{version}_{branch}.log',
  run:
    shell(f"""(time\
    python reweightings/reweighting_plots.py\
           --original {input.original}\
           --target {input.target}\
           --year {wildcards.year}\
           --mode {wildcards.mode}\
           --version {wildcards.version}\
           --branch {wildcards.branch}\
           --sweighted {output.sweighted}\
           --kinweighted {output.kinweighted}\
    ) &> {log} #2>&1""")


rule plot_angular_acceptance_reweightings:
  wildcard_constraints:
    mode = "(TOY|MC)_Bs2JpsiPhi(_dG0)?"
  input:
    original = lambda wcs: tuples(wcs),
    weights = lambda wcs: tuples(wcs,weight='angWeight'),
    target = lambda wcs: tuples(wcs,mode='cdata')
  output:
    'output/figures/reweightings/{year}/{mode}/{version,[A-Za-z0-9]+}_{branch}_kkpWeight.pdf',
  log:
    'output/log/reweightings/plot_angular_reweightings/{year}/{mode}/{version}_{branch}.log',
  run:
    shell(f"""(time\
    python angular_acceptance/plot1.py\
           --original {input.original}\
           --weights {input.weights}\
           --target {input.target}\
           --year {wildcards.year}\
           --mode {wildcards.mode}\
           --version {wildcards.version}\
           --branch {wildcards.branch}\
           --kkpweighted {output}\
    ) &> {log} #2>&1""")
    ### <<<Â send_mail(f"Polarity weighting", f"{log}")              # WARNING #


rule simon_comparisons:
  input:
    original = lambda wcs: tuples(wcs),
    target = lambda wcs: tuples(wcs,mode='cdata')
  output:
    'output/figures/reweightings/{year}/{mode}/{version,[A-Za-z0-9]+}_{branch}_comparison.pdf',
  log:
    'output/log/reweightings/simon_comparisons/{year}/{mode}/{version}_{branch}.log',
  run:
    shell(f"""(time\
    python reweightings/reweighting_plots.py\
           --original {input.original}\
           --target {input.target}\
           --year {wildcards.year}\
           --mode {wildcards.mode}\
           --version {wildcards.version}\
           --branch {wildcards.branch}\
           --sweighted {output.sweighted}\
           --kinweighted {output.kinweighted}\
    ) &> {log} #2>&1""")
