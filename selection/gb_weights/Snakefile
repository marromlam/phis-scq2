# USED

# select for GBW  -- READY -- {{{

rule select_GBW_MC_ntuples:
    """
    Rule for selecting MC for GB weights.
    Apply cuts specified in input yaml files on the given tree and adds branches
    specified in the corresponding yaml file. Saves new tree in the requested location
    """
    threads: 4
    resources:
        mem_mb =  6000
    wildcard_constraints:
        mode = "MC_(Bs2JpsiPhi|Bd2JpsiKstar|Bu2JpsiKplus)"
    input:
        script = 'selection/tools/apply_selection.py',
        #file = expand(rules.merge_polarities.output, mode='{mode}',
        #                                              year='{year}',
        #                                              strip_sim='{strip_sim}'),
        cuts = ['selection/cuts.yaml', 'selection/gb_weights/cuts.yaml'],
        branches = 'selection/branches.yaml',
        file = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_preselected.root',
    output:
        # temp(tuples_path('{mode}/{mode}_{strip_sim}_{year}_GBW_MC_selected.root'))
        SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_GBpreliminar.root',
        # /scratch46/marcos.romero/sidecar14/{year}/{mode}/{version}_{strip_sim}GBWpreliminar.root'
    params:
        cutkeys = 'B_TAU_cuts L0_cuts HLT1_cuts HLT2_cuts MC_specific',
        # file = lambda wildcards: selconfig['eos'] + '/' + config['version'] + '/PID/{}/{}_{}_{}_selected_pidcorrected.root'.format(wildcards.mode, wildcards.mode, wildcards.year, wildcards.strip_sim)
    log:
        'output/log/select_GBW_MC_ntuples/{mode}/{version}_{strip_sim}_{year}_GBW_MC_selected.log'
    run:
        shell(f'(time python {input.script} --input-file {input.file} \
                               --output-file {output} \
                               --mode {wildcards.mode} \
                               --cut-keys {params.cutkeys} \
                               --selection-files {input.cuts} \
                               --branches-files {input.branches} \
                               --year {wildcards.year}) &> {log}')


rule select_GBW_data_ntuples:
    """
    Rule for sweighting data for GB weights.
    Apply cuts specified in input yaml files on the given tree and adds branches
    specified in the corresponding yaml file. Saves new tree in the requested location
    """
    threads: 4
    resources:
        mem_mb = 6000
    wildcard_constraints:
        mode = "(Bs2JpsiPhi|Bd2JpsiKstar|Bu2JpsiKplus)"
    input:
        script = 'selection/tools/apply_selection.py',
        cuts = ['selection/cuts.yaml', 'selection/gb_weights/cuts.yaml'],
        branches = ['selection/gb_weights/branches.yaml', 'selection/gb_weights/weighting_variables.yaml']
    output:
        # temp(tuples_path('{mode}/{mode}_{year}_GBW_data_selected.root'))
        SAMPLES + '/{year}/{mode}/{version}_GBWpreliminar.root'
    params:
        files = lambda wildcards: selconfig['eos_mc'][wildcards.mode][int(wildcards.year)][wildcards.strip_sim] \
                if wildcards.mode.startswith('MC_') \
                else selconfig['eos_data'][selconfig['streams'][wildcards.mode]][int(wildcards.year)],
        treename = lambda wildcards: selconfig['treenames'][wildcards.mode],
        cutkeys = 'B_TAU_cuts L0_cuts HLT1_cuts HLT2_cuts B_cuts_SW_GBW'
    log:
        'output/log/select_GBW_data_ntuples/{year}/{mode}/{version}_GBW_MC_selected.log'
    run:
        shell(f'(time python {input.script} \
        --input-file {params.files} \
        --input-tree-name {params.treename} \
        --output-file {output} \
        --mode {wildcards.mode} \
        --cut-keys {params.cutkeys} \
        --selection-files {input.cuts} \
        --branches-files {input.branches} \
        --year {wildcards.year}) &> {log}')

# }}}


#  USED !!!!!@
rule sweight_GBW_data_ntuples:
    """
    Rule for sweighting data for GB weights.
    Performs fit to Bs mass. Saves new tree with sweights in the requested location
    """
    input:
        script = 'selection/gb_weights/sweights_for_gb_weights.py',
        tuple_file = expand(rules.select_GBW_data_ntuples.output, year='{year}',
                                                                  version='{version}',
                                                                  mode='{mode}'),
    params:
        branch_name = 'B_ConstJpsi_M_1',
        plot_dir = tuples_path('{mode}')
    output:
        # temp(tuples_path('{mode}/{mode}_{year}_GBW_data_sweighted.root'))
        SAMPLES + '/{year}/{mode}/{version}_bkgsubtracted.root'
    shell:
        'python {input.script} --input-file {input.tuple_file} \
                               --output-file {output} \
                               --input-branch {params.branch_name} \
                               --plot-dir {params.plot_dir} \
                               --mode {wildcards.mode} \
                               --year {wildcards.year}'

rule mass_prefit_GBW_mc:
    """
    Run mass fit on selected Bu->J/psiKplus or Bd->J/psiKstar MC to determine Ipatia tail parameters for
    the fit to data. It only takes B_BKGCAT=0,50 candidates.
    """
    input:
        script = 'selection/tools/mass_fit_ipatia.py',
        root_file =  expand(rules.select_GBW_MC_ntuples.output, mode ='MC_{mode}', 
                                                               year ='{year}',
                                                               version ='{version}',
                                                               strip_sim ='{strip_sim}') 
    output:
        params_file =  output_path('MC_{mode}/mass_prefit_GBW_{year}/mass_fit_params_{version}_{year}_{strip_sim}.json'),
        plots = directory(output_path('MC_{mode}/mass_prefit_GBW_{version}_{year}_{strip_sim}/plots/'))
    shell:
        'python {input.script} --input-file {input.root_file} \
                               --fit-result-file {output.params_file} \
                               --mode {wildcards.mode} \
                               --plots-loc {output.plots}'



rule sweight_GBW_data_ntuple_Ipatia:
    """
    Rule for sweighting data for GB weights.
    Performs fit to Bu or Bd mass fixing Ipatia tail parameters to mc with B_BKGCAT=0,50. 
    Saves new tree with sweights in the requested location
    """
    input:
        script = 'selection/tools/mass_fit_ipatia.py',
        root_file = expand(rules.select_GBW_data_ntuples.output, mode='{mode}',version='{version}',year='{year}'),
        params_file = lambda wildcards: expand(rules.mass_prefit_GBW_mc.output.params_file, version='{version}', year='{year}', mode= '{mode}', strip_sim = selconfig['gbw_input_MC_mode']['MC_'+ wildcards.mode][wildcards.year]['strip_sim'])
    output:
        root_file = tuples_path('{mode}/{version}_{mode}_{year}_GBW_data_sweighted_ipatia.root'),
        plots = directory(output_path('{mode}/{version}_mass_fit_GBW_{year}/plots/')),
        params_file = output_path('{mode}/{version}_mass_fit_GBW_{year}/mass_fit_params_{year}.json'),
        root_file_tmp = temp(output_path('{mode}/{version}_mass_fit_GBW_{year}.root'))
    params:
        params_to_fix = ['alpha1', 'alpha2', 'n1', 'n2', 'm_sig_lambda'],
        mass_range = lambda wildcards:  (5240, 5320) if('Bu' in wildcards.mode) else (5230, 5330)
    shell:
        'python {input.script} --input-file {input.root_file} \
                               --output-file-tmp {output.root_file_tmp} \
                               --output-file {output.root_file} \
                               --mode {wildcards.mode} \
                               --mass-range {params.mass_range} \
                               --params-to-fix-file {input.params_file} \
                               --params-to-fix-list {params.params_to_fix} \
                               --background \
                               --fit-result-file {output.params_file} \
                               --plots-loc {output.plots} \
                               --add-sweights'

def sweighted_data_for_gb_weights(wildcards):
    mode = wildcards.data_mode
    version = wildcards.version
    if wildcards.data_mode == 'Bs2JpsiPhi_Prompt':
        return expand(rules.select_GBW_data_ntuples.output, year=wildcards.data_year, version=version, mode=wildcards.data_mode)

    elif ('Bs2JpsiPhi' in wildcards.data_mode and wildcards.data_mode != 'Bs2JpsiPhi_Prompt'):
        return expand(rules.sweight_GBW_data_ntuples.output, mode=wildcards.data_mode, version=version, year=wildcards.data_year)

    else:
        # WARNING: Now we use DSCB instead of Hypatia
        return expand(rules.sweight_GBW_data_ntuples.output, mode=wildcards.data_mode, version=version, year=wildcards.data_year)
        # return expand(rules.sweight_GBW_data_ntuple_Ipatia.output.root_file,mode=wildcards.data_mode, version=version, year=wildcards.data_year) 

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################

# USED
rule selection_calculate_gb_weights:
    """
    Rule to calculate GB weights on MC using sweighted data.
    """
    input:
        script = 'selection/tools/reweighting.py',
        target_file = sweighted_data_for_gb_weights,

        variables_file = 'selection/gb_weights/weighting_variables.yaml',
        files = expand(rules.select_GBW_MC_ntuples.output, year='{mc_year}',
                                                           mode='{mc_mode}',
                                                           version='{version}',
                                                           strip_sim='{strip_sim}'),
    params:
        target_weight = lambda wildcards: expand('sw' if wildcards.data_mode != 'Bs2JpsiPhi_Prompt' 
                                                      else '1'),
        weight_method = 'gb'
    output:
        # tuples_path('{mc_mode}/{mc_year}/{strip_sim}/{mc_mode}_{mc_year}_{strip_sim}_{data_mode}_{data_year}_GB_weights.pkl'),
        SAMPLES + '/{mc_year}/{mc_mode}/{version}_{strip_sim}_gbWeighted_{data_mode}_{data_year}.pkl'
    log:
        'output/log/selection_calculate_gbw/{mc_mode}/{mc_year}/{strip_sim}/{version}_{mc_mode}_{mc_year}_{strip_sim}_{data_mode}_{data_year}_GB_weights.log'
    run:
        shell('(time python {input.script} --original-file {input.files} \
                               --target-file {input.target_file} \
                               --target-weight {params.target_weight} \
                               --mode {wildcards.mc_mode} \
                               --weight-method {params.weight_method} \
                               --variables-files {input.variables_file} \
                               --output-file {output}) &> {log}')

def weights_for_GBW(wildcards):
    mc_mode = selconfig['gbw_input_MC_mode'][wildcards.mode][wildcards.year]['mode']
    strip_sim = selconfig['gbw_input_MC_mode'][wildcards.mode][wildcards.year]['strip_sim']
    mc_year = selconfig['gbw_input_MC_year'][wildcards.year]
    data_mode = selconfig['gbw_input_data_mode'][wildcards.mode]
    data_year = selconfig['gbw_input_data_year'][wildcards.year]

    return expand(rules.selection_calculate_gb_weights.output, mc_mode=mc_mode,
                                                     mc_year=mc_year,
                                                     version=wildcards.version,
                                                     data_mode=data_mode,
                                                     data_year=data_year,
                                                     strip_sim=strip_sim)

rule apply_gb_weights:
    """
    Rule to apply GB weights on MC reading from a pickle file where these have been stored.
    """
    input:
        script = 'selection/tools/apply_weights.py',
        files = expand(rules.apply_preselection_mc.output, year='{year}',
                                                           mode='{mode}',
                                                           version='{version}',
                                                           strip_sim='{strip_sim}'),
        weights_file = weights_for_GBW
    output:
        # temp(tuples_path('{mode}/{year}/{strip_sim}/{mode}_{year}_{strip_sim}_GB_weighted.root'))
        SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_gbWeight.root'
    params:
        variables_file = 'selection/gb_weights/weighting_variables.yaml',
        weight_method = 'gb',
        output_weight_name = 'gb_weights'
    shell:
        'python {input.script} --input-file {input.files} \
                               --variables-files {params.variables_file} \
                               --weight-method {params.weight_method} \
                               --weights-file {input.weights_file} \
                               --mode {wildcards.mode} \
                               --output-file {output} \
                               --output-weight-name {params.output_weight_name}'

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################

rule apply_gb_weights_prompt:
    """
    Rule to apply GB weights on MC reading from a pickle file where these have been stored.
    For MC_Bs2JpsiPhi_Prompt weighted to Bs2JpsiPhi_Prompt data only
    """
    input:
        script = 'selection/tools/apply_weights.py',
        files = expand(rules.apply_gb_weights.output, year='{year}',
                                                           mode='{mode}',
                                                           version='{version}',
                                                           strip_sim='{strip_sim}'),
        weights_file = lambda wildcards: expand(rules.selection_calculate_gb_weights.output, mc_mode='{mode}',
                                                                 mc_year='{year}',
                                                           version='{version}',
                                                                 data_mode='Bs2JpsiPhi_Prompt',
                                                                 data_year = selconfig['gbw_input_data_year'][wildcards.year],
                                                                 strip_sim='{strip_sim}')
    output:
        temp(tuples_path('{mode}/{year}/{strip_sim}/{mode}_{year}_{strip_sim}_GB_weighted_Prompt.root'))
    params:
        variables_file = 'gb_weights/weighting_variables.yaml',
        weight_method = 'gb',
        output_weight_name = 'gb_weights_prompt'
    shell:
        'python {input.script} --input-file {input.files} \
                               --variables-files {params.variables_file} \
                               --weight-method {params.weight_method} \
                               --weights-file {input.weights_file} \
                               --mode {wildcards.mode} \
                               --output-file {output} \
                               --output-weight-name {params.output_weight_name}'


# vim: fdm:marker
