rule correct_pid:
    """
    Generic rule.
    Adds corrected PID variables to the given MC tuple
    """
    wildcard_constraints:
        strip_sim = "str.*",
        polarity = "(Up|Down)",
    input:
        script = 'selection/tools/PIDCorr.py',
        tracks = 'selection/pid/pidcorr.yaml',
        file = lambda wildcards: expand(rules.correct_muonpid.output.file if wildcards.mode != 'MC_Bs2DsPi' else rules.prepare_mc.output,
                                                                  version='{version}',
                                                                  mode='{mode}',
                                                                  strip_sim='{strip_sim}',
                                                                  year='{year}',
                                                                  polarity='{polarity}'),
    output:
        file = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pidcorrected{polarity}.root',
        tmp1 = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pidcorr{polarity}_tmp1.root',
        tmp2 = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pidcorr{polarity}_tmp2.root',
    log:
        'output/log/selection_pid_correction/{year}/{mode}/{version}_{strip_sim}_pidcorrected{polarity}.log',
    shell:
        selconfig['runUrania'] + ' ' +
        'python {input.script} --input-file {input.file} \
                               --input-tree-name DecayTree \
                               --output-file {output.file} \
                               --data-set Mag{wildcards.polarity}_{wildcards.year} \
                               --mode {wildcards.mode} \
                               --tracks-file {input.tracks} \
                               --tmp1 {output.tmp1} \
                               --tmp2 {output.tmp2} &> {log}'

rule correct_muonpid:
    """
    Generic rule.
    Adds corrected muon PID variables to the given MC tuple
    """
    input:
        script = 'selection/tools/PIDGen.py',
        tracks = 'selection/pid/pidgen.yaml',
        file = expand(rules.add_generator_level_info.output.file, mode='{mode}',
                                                                  version='{version}',
                                                     strip_sim='{strip_sim}',
                                                     year='{year}',
                                                     polarity='{polarity}'),
    output:
        file = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pidgen{polarity}.root',
        tmp1 = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pidgen{polarity}_tmp1.root',
        tmp2 = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pidgen{polarity}_tmp2.root',
    log:
        'output/log/selection_pid_correction/{year}/{mode}/{version}_{strip_sim}_pidgen{polarity}.log',
    shell:
        selconfig['runUrania'] + ' ' +
        'python {input.script} --input-file {input.file} \
                              --input-tree-name DecayTree \
                              --output-file {output.file} \
                              --data-set Mag{wildcards.polarity}_{wildcards.year}\
                              --mode {wildcards.mode} \
                              --tracks-file {input.tracks} \
                              --tmp1 {output.tmp1} \
                              --tmp2 {output.tmp2} &> {log}'


