

ruleorder: blend_angular_acceptance > naive_angular_acceptance

# naive angular acceptance - no correction (only sWeight and polWeight) --------
#     Here we have 2 rules to compute angular acceptance without correcting
#     MC samples. First rule computes angular acceptance for MC, and second one
#     merges MC results to compute RD angular acceptance

rule naive_angular_acceptance:
  wildcard_constraints:
    mode = "(TOY|MC)_Bs2JpsiPhi(_dG0)?"
  input:
    sample = SAMPLES_PATH+'{year}/{mode}/{version}.root',
  params:
    params = 'angular_acceptance/params/2016/{mode}.json'
  output:
    params = 'output/params/angular_acceptance/{year}/{mode}/{version}_Naive_{trigger}.json',
    tables = 'output/tables/angular_acceptance/{year}/{mode}/{version}_Naive_{trigger}.tex'
  log:
    'output/log/angular_acceptance/naive_angular_acceptance/{year}_{mode}_{version}_{trigger}.log'
  run:
    shell(f"""(time\
    python angular_acceptance/naive.py\
           --sample {input.sample}\
           --input-params {params.params}\
           --output-params {output.params}\
           --output-tables {output.tables}\
           --mode {wildcards.mode}\
           --year {wildcards.year}\
           --version {wildcards.version}\
           --trigger {wildcards.trigger}
    ) &> {log} #2>&1""")
    send_mail(f"Naive Angular Acceptance :: {wildcards.version} {wildcards.year} {wildcards.mode} {wildcards.trigger}", f"{log}")



rule blend_angular_acceptance:
  wildcard_constraints:
    step = "(Naive|Corrected)",
    mode = "Bs2JpsiPhi"
  input:
    weights_std = 'output/params/angular_acceptance/{year}/MC_Bs2JpsiPhi/{version}_{step}_{trigger}.json',
    weights_dg0 = 'output/params/angular_acceptance/{year}/MC_Bs2JpsiPhi_dG0/{version}_{step}_{trigger}.json',
  output:
    params = 'output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_{step}_{trigger}.json',
    tables = 'output/tables/angular_acceptance/{year}/Bs2JpsiPhi/{version}_{step}_{trigger}.tex'
  log:
    'output/log/angular_acceptance/merge_angular_acceptance/{year}/Bs2JpsiPhi/{version}_{step}_{trigger}.log'
  run:
    shell(f"""(time\
    python angular_acceptance/merge.py\
           --weights-std {input.weights_std}\
           --weights-dg0 {input.weights_dg0}\
           --output-params {output.params}\
           --output-tables {output.tables}\
           --year {wildcards.year}\
           --version {wildcards.version}\
           --trigger {wildcards.trigger}\
           --step {wildcards.step}\
    ) &> {log} #2>&1""")
    send_mail(f"Blend Angular Acceptance :: {wildcards.version} {wildcards.year} {wildcards.trigger}", f"{log}")









# Correcting MC with kinematic weights -----------------------------------------
#     Correcting MC sample with kinematic weighting in B_P, B_PT and X_M helps
#     to better match MC to RD.

rule corrected_angular_acceptance:
  wildcard_constraints:
    mode = "MC_Bs2JpsiPhi(_dG0)?"
  input:
    sample_mc = SAMPLES_PATH+'{year}/{mode}/{version}.root',
    sample_rd = SAMPLES_PATH+'{year}/Bs2JpsiPhi/{version}.root',
  params:
    params = 'angular_acceptance/params/2016/{mode}.json',
  output:
    params = 'output/params/angular_acceptance/{year}/{mode}/{version}_Corrected_{trigger}.json',
    tables = 'output/tables/angular_acceptance/{year}/{mode}/{version}_Corrected_{trigger}.tex',
    weight = SAMPLES_PATH+'{year}/{mode}/{version}_angWeight_{trigger}.npy'
  log:
    'output/log/angular_acceptance/corrected_angular_acceptance/{year}/{mode}/{version}_{trigger}.log'
  run:
    shell(f"""(time\
    python angular_acceptance/corrected.py\
           --sample-mc {input.sample_mc}\
           --sample-data {input.sample_rd}\
           --input-params {params.params}\
           --output-params {output.params}\
           --output-tables {output.tables}\
           --output-weights-file {output.weight}\
           --mode {wildcards.mode}\
           --year {wildcards.year}\
           --version {wildcards.version}\
           --trigger {wildcards.trigger}\
    ) #&> {log} #2>&1""")
    send_mail(f"Corrected Angular Acceptance :: {wildcards.version} {wildcards.year} {wildcards.mode} {wildcards.trigger}", f"{log}")

rule corrected_binned_angular_acceptance:
  wildcard_constraints:
    mode = "MC_Bs2JpsiPhi(_dG0)?",
    binnedvar = "(pt|sigmat|eta)",
    bin = "(1|2|3)"
  input:
    sample_mc = SAMPLES_PATH+'{year}/{mode}/{version}.root',
    sample_rd = SAMPLES_PATH+'{year}/Bs2JpsiPhi/{version}.root',
  params:
    params = 'angular_acceptance/params/2016/{mode}.json',
  output:
    params = 'output/params/angular_acceptance/{year}/{mode}/{version}_CorrectedBin{binnedvar}{bin}_{trigger}.json',
    tables = 'output/tables/angular_acceptance/{year}/{mode}/{version}_CorrectedBin{binnedvar}{bin}_{trigger}.tex',
    weight = SAMPLES_PATH+'{year}/{mode}/{version}_angWeight_{binnedvar}{bin}_{trigger}.npy'
  log:
    'output/log/angular_acceptance/corrected_binned_angular_acceptance/{year}/{mode}/{version}_{binnedvar}{bin}_{trigger}.log'
  run:
    shell(f"""(time\
    python angular_acceptance/corrected.py\
           --sample-mc {input.sample_mc}\
           --sample-data {input.sample_rd}\
           --input-params {params.params}\
           --output-params {output.params}\
           --output-tables {output.tables}\
           --output-weights-file {output.weight}\
           --mode {wildcards.mode}\
           --year {wildcards.year}\
           --version {wildcards.version}\
           --trigger {wildcards.trigger}\
           --binvar {wildcards.binnedvar}{wildcards.bin}\
    ) #&> {log} #2>&1""")
    send_mail(f"Corrected Angular Acceptance :: {wildcards.version} {wildcards.year} {wildcards.mode} {wildcards.trigger}", f"{log}")




# Run2 angular acceptance ------------------------------------------------------
#     This rule runs the iterative procedure for all Run2 years using both
#     MC and MC_dG0 files.
rule iterativeRun2a_angular_acceptance:
  wildcard_constraints:
    version = "(v[1-9]r[0-9]|v0r[2-9])", # v0r0 and v0r2 (2015&2016) not allowed
    mode = "Bs2JpsiPhi"
  input:
    # Samples and weights
    sample_std = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi',year='Run2a'),
    sample_dG0 = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi_dG0',year='Run2a'),
    weights_std = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi',year='Run2a',weight='angWeight'),
    weights_dG0 = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi_dG0',year='Run2a',weight='angWeight'),
    sample_data = lambda wcs: tuples(wcs,mode='Bs2JpsiPhi',year='Run2a'),
    # Angular acceptance at corrected level
    angacc_biased = ['output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_corrected_biased.json',
                     'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_corrected_biased.json'],
    angacc_unbiased = ['output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_corrected_unbiased.json',
                       'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_corrected_unbiased.json'],
    # Time acceptance coefficients
    timeacc_biased = ['output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_Baseline_biased.json',
                      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_Baseline_biased.json'],
    timeacc_unbiased = ['output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_Baseline_unbiased.json',
                        'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_Baseline_unbiased.json'],
    # CSP
    csp_factors = ['output/params/csp_factors/2015/Bs2JpsiPhi/{version}.json',
           'output/params/csp_factors/2016/Bs2JpsiPhi/{version}.json'],
    # Time resolution
    time_resolution = ['output/params/time_resolution/2015/Bs2JpsiPhi/{version}.json',
           'output/params/time_resolution/2016/Bs2JpsiPhi/{version}.json'],
    # Flavor tagging
    flavor = ['output/params/flavor_tagging/2015/Bs2JpsiPhi/{version}.json',
              'output/params/flavor_tagging/2016/Bs2JpsiPhi/{version}.json']
  params:
    params_std = ['angular_acceptance/params/2016/MC_Bs2JpsiPhi.json',
                  'angular_acceptance/params/2016/MC_Bs2JpsiPhi.json'],
    params_dG0 = ['angular_acceptance/params/2016/MC_Bs2JpsiPhi_dG0.json',
                  'angular_acceptance/params/2016/MC_Bs2JpsiPhi_dG0.json'],
  output:
    angacc_biased = ['output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_Run2aBase_biased.json',
               'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_Run2aBase_biased.json'],
    angacc_unbiased = ['output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_Run2aBase_unbiased.json',
               'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_Run2aBase_unbiased.json'],
    tables_biased = ['output/tables/angular_acceptance/2015/Bs2JpsiPhi/{version}_Run2aBase_biased.tex',
               'output/tables/angular_acceptance/2016/Bs2JpsiPhi/{version}_Run2aBase_biased.tex'],
    tables_unbiased = ['output/tables/angular_acceptance/2015/Bs2JpsiPhi/{version}_Run2aBase_unbiased.tex',
               'output/tables/angular_acceptance/2016/Bs2JpsiPhi/{version}_Run2aBase_unbiased.tex'],
  log:
    'output/log/angular_acceptance/iterative_angular_acceptance/Run2a/Bs2JpsiPhi/{version}.log'
  run:
    shell(f"""(time\
    python angular_acceptance/iterative.py\
           --sample-mc-std           {",".join(input.sample_std)}\
           --sample-mc-dg0           {",".join(input.sample_dG0)}\
           --sample-data             {",".join(input.sample_data)}\
           --params-mc-std           {",".join(params.params_std)}\
           --params-mc-dg0           {",".join(params.params_dG0)}\
           --angular-weights-mc-std  {",".join(input.weights_std)}\
           --angular-weights-mc-dg0  {",".join(input.weights_dG0)}\
           --input-weights-biased    {",".join(input.angacc_biased)}\
           --input-weights-unbiased  {",".join(input.angacc_unbiased)}\
           --input-coeffs-biased     {",".join(input.timeacc_biased)}\
           --input-coeffs-unbiased   {",".join(input.timeacc_unbiased)}\
           --input-csp               {",".join(input.csp_factors)}\
           --input-time-resolution   {",".join(input.time_resolution)}\
           --input-flavor-tagging    {",".join(input.flavor)}\
           --output-weights-biased   {",".join(output.angacc_biased)}\
           --output-weights-unbiased {",".join(output.angacc_unbiased)}\
           --output-tables-biased    {",".join(output.tables_biased)}\
           --output-tables-unbiased  {",".join(output.tables_unbiased)}\
           --year                    {",".join(yd['Run2a'])}\
           --version                 {wildcards.version}\
    ) &> {log} #2>&1""")
    #send_mail(f"Run2 Angular Acceptance", f"{log}")



# Run2 angular acceptance ------------------------------------------------------
#     This rule runs the iterative procedure for all Run2 years using both
#     MC and MC_dG0 files.
rule iterativeRun2_angular_acceptance:
  wildcard_constraints:
    version = "(v[1-9]r[0-9]|v0r[2-9])", # v0r0 and v0r2 (2015&2016) not allowed
    mode = "Bs2JpsiPhi"
  input:
    # Samples and weights
    sample_std = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi',year='Run2'),
    sample_dG0 = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi_dG0',year='Run2'),
    weights_std = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi',year='Run2',weight='angWeight'),
    weights_dG0 = lambda wcs: tuples(wcs,mode='MC_Bs2JpsiPhi_dG0',year='Run2',weight='angWeight'),
    sample_data = lambda wcs: tuples(wcs,mode='Bs2JpsiPhi',year='Run2'),
    # Angular acceptance at corrected level
    angacc_biased = ['output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_corrected_biased.json',
                     'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_corrected_biased.json',
                     'output/params/angular_acceptance/2017/Bs2JpsiPhi/{version}_corrected_biased.json',
                     'output/params/angular_acceptance/2018/Bs2JpsiPhi/{version}_corrected_biased.json'],
    angacc_unbiased = ['output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_corrected_unbiased.json',
                       'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_corrected_unbiased.json',
                       'output/params/angular_acceptance/2017/Bs2JpsiPhi/{version}_corrected_unbiased.json',
                       'output/params/angular_acceptance/2018/Bs2JpsiPhi/{version}_corrected_unbiased.json'],
    # Time acceptance coefficients
    timeacc_biased = ['output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_Baseline_biased.json',
                      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_Baseline_biased.json',
                      'output/params/time_acceptance/2017/Bd2JpsiKstar/{version}_Baseline_biased.json',
                      'output/params/time_acceptance/2018/Bd2JpsiKstar/{version}_Baseline_biased.json'],
    timeacc_unbiased = ['output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_Baseline_unbiased.json',
                        'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_Baseline_unbiased.json',
                        'output/params/time_acceptance/2017/Bd2JpsiKstar/{version}_Baseline_unbiased.json',
                        'output/params/time_acceptance/2018/Bd2JpsiKstar/{version}_Baseline_unbiased.json'],
    # CSP
    csp_factors = ['output/params/csp_factors/2015/Bs2JpsiPhi/{version}.json',
           'output/params/csp_factors/2016/Bs2JpsiPhi/{version}.json',
           'output/params/csp_factors/2017/Bs2JpsiPhi/{version}.json',
           'output/params/csp_factors/2018/Bs2JpsiPhi/{version}.json'],
    # Time resolution
    time_resolution = ['output/params/time_resolution/2015/Bs2JpsiPhi/{version}.json',
           'output/params/time_resolution/2016/Bs2JpsiPhi/{version}.json',
           'output/params/time_resolution/2017/Bs2JpsiPhi/{version}.json',
           'output/params/time_resolution/2018/Bs2JpsiPhi/{version}.json'],
    # Flavor tagging
    # flavor = ['output/params/flavor_tagging/2015/Bs2JpsiPhi/{version}.json',
    #           'output/params/flavor_tagging/2016/Bs2JpsiPhi/{version}.json',
    #           'output/params/flavor_tagging/2017/Bs2JpsiPhi/{version}.json',
    #           'output/params/flavor_tagging/2018/Bs2JpsiPhi/{version}.json']
  params:
    params_std = ['angular_acceptance/params/2016/MC_Bs2JpsiPhi.json',
                  'angular_acceptance/params/2016/MC_Bs2JpsiPhi.json',
                  'angular_acceptance/params/2016/MC_Bs2JpsiPhi.json',
                  'angular_acceptance/params/2016/MC_Bs2JpsiPhi.json'],
    params_dG0 = ['angular_acceptance/params/2016/MC_Bs2JpsiPhi_dG0.json',
                  'angular_acceptance/params/2016/MC_Bs2JpsiPhi_dG0.json',
                  'angular_acceptance/params/2016/MC_Bs2JpsiPhi_dG0.json',
                  'angular_acceptance/params/2016/MC_Bs2JpsiPhi_dG0.json'],
  output:
    angacc_biased = ['output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_Baseline_biased.json',
               'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_Baseline_biased.json',
               'output/params/angular_acceptance/2017/Bs2JpsiPhi/{version}_Baseline_biased.json',
               'output/params/angular_acceptance/2018/Bs2JpsiPhi/{version}_Baseline_biased.json'],
    angacc_unbiased = ['output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_Baseline_unbiased.json',
               'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_Baseline_unbiased.json',
               'output/params/angular_acceptance/2017/Bs2JpsiPhi/{version}_Baseline_unbiased.json',
               'output/params/angular_acceptance/2018/Bs2JpsiPhi/{version}_Baseline_unbiased.json'],
    tables_biased = ['output/tables/angular_acceptance/2015/Bs2JpsiPhi/{version}_Baseline_biased.tex',
               'output/tables/angular_acceptance/2016/Bs2JpsiPhi/{version}_Baseline_biased.tex',
               'output/tables/angular_acceptance/2017/Bs2JpsiPhi/{version}_Baseline_biased.tex',
               'output/tables/angular_acceptance/2018/Bs2JpsiPhi/{version}_Baseline_biased.tex'],
    tables_unbiased = ['output/tables/angular_acceptance/2015/Bs2JpsiPhi/{version}_Baseline_unbiased.tex',
               'output/tables/angular_acceptance/2016/Bs2JpsiPhi/{version}_Baseline_unbiased.tex',
               'output/tables/angular_acceptance/2017/Bs2JpsiPhi/{version}_Baseline_unbiased.tex',
               'output/tables/angular_acceptance/2018/Bs2JpsiPhi/{version}_Baseline_unbiased.tex'],
  log:
    'output/log/angular_acceptance/iterative_angular_acceptance/Run2/Bs2JpsiPhi/{version}.log'
  run:
    shell(f"""(time\
    python angular_acceptance/iterative.py\
           --sample-mc-std           {",".join(input.sample_std)}\
           --sample-mc-dg0           {",".join(input.sample_dG0)}\
           --sample-data             {",".join(input.sample_data)}\
           --params-mc-std           {",".join(params.params_std)}\
           --params-mc-dg0           {",".join(params.params_dG0)}\
           --angular-weights-mc-std  {",".join(input.weights_std)}\
           --angular-weights-mc-dg0  {",".join(input.weights_dG0)}\
           --input-weights-biased    {",".join(input.angacc_biased)}\
           --input-weights-unbiased  {",".join(input.angacc_unbiased)}\
           --input-coeffs-biased     {",".join(input.timeacc_biased)}\
           --input-coeffs-unbiased   {",".join(input.timeacc_unbiased)}\
           --input-csp               {",".join(input.csp_factors)}\
           --input-time-resolution   {",".join(input.time_resolution)}\
           --output-weights-biased   {",".join(output.angacc_biased)}\
           --output-weights-unbiased {",".join(output.angacc_unbiased)}\
           --output-tables-biased    {",".join(output.tables_biased)}\
           --output-tables-unbiased  {",".join(output.tables_unbiased)}\
           --year                    {",".join(yd['Run2'])}\
           --version                 {wildcards.version}\
    ) #&> {log} #2>&1""")
    #send_mail(f"Run2 Angular Acceptance", f"{log}")













rule iterative_angular_acceptance_yearly:
  wildcard_constraints:
    year = "\d{4}"
  input:
    sample_std      = ['/scratch17/marcos.romero/phis_samples/{year}/MC_Bs2JpsiPhi/{version}.root'],
    sample_dG0      = ['/scratch17/marcos.romero/phis_samples/{year}/MC_Bs2JpsiPhi_dG0/{version}.root'],
    weights_std  = ['/scratch17/marcos.romero/phis_samples/{year}/MC_Bs2JpsiPhi/{version}_angWeight.root'],
    weights_dG0  = ['/scratch17/marcos.romero/phis_samples/{year}/MC_Bs2JpsiPhi_dG0/{version}_angWeight.root'],
    sample_data     = ['/scratch17/marcos.romero/phis_samples/{year}/Bs2JpsiPhi/{version}.root'],
    angacc_biased        = ['output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_corrected_biased.json'],
    angacc_unbiased      = ['output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_corrected_unbiased.json'],
    timeacc_biased   = ['output/params/time_acceptance/{year}/Bd2JpsiKstar/{version}_Baseline_biased.json'],
    timeacc_unbiased = ['output/params/time_acceptance/{year}/Bd2JpsiKstar/{version}_Baseline_unbiased.json'],
    script          = 'angular_acceptance/iterative.py',
    # CSP
    csp_factors = ['output/params/csp_factors/{year}/Bs2JpsiPhi/{version}.json'],
    # Time resolution
    time_resolution = ['output/params/time_resolution/{year}/Bs2JpsiPhi/{version}.json'],
    # Flavor tagging
    # flavor = ['output/params/flavor_tagging/2015/Bs2JpsiPhi/{version}.json',
    #           'output/params/flavor_tagging/2016/Bs2JpsiPhi/{version}.json',
    #           'output/params/flavor_tagging/2017/Bs2JpsiPhi/{version}.json',
    #           'output/params/flavor_tagging/2018/Bs2JpsiPhi/{version}.json']
  params:
    params_std = ['angular_acceptance/params/2016/MC_Bs2JpsiPhi.json'],
    params_dG0 = ['angular_acceptance/params/2016/MC_Bs2JpsiPhi_dG0.json'],
  output:
    angacc_biased        = ['output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_Yearly_biased.json'],
    angacc_unbiased      = ['output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_Yearly_unbiased.json'],
    tables_biased   = ['output/tables/angular_acceptance/{year}/Bs2JpsiPhi/{version}_Yearly_biased.json'],
    tables_unbiased = ['output/tables/angular_acceptance/{year}/Bs2JpsiPhi/{version}_Yearly_unbiased.json'],
  log:
    'output/log/angular_acceptance/iterative_angular_acceptance/{year}_Bs2JpsiPhi_{version}.log'
  run:
    shell(f"""(time\
    python angular_acceptance/iterative.py\
           --sample-mc-std           {",".join(input.sample_std)}\
           --sample-mc-dg0           {",".join(input.sample_dG0)}\
           --sample-data             {",".join(input.sample_data)}\
           --params-mc-std           {",".join(params.params_std)}\
           --params-mc-dg0           {",".join(params.params_dG0)}\
           --angular-weights-mc-std  {",".join(input.weights_std)}\
           --angular-weights-mc-dg0  {",".join(input.weights_dG0)}\
           --input-weights-biased    {",".join(input.angacc_biased)}\
           --input-weights-unbiased  {",".join(input.angacc_unbiased)}\
           --input-coeffs-biased     {",".join(input.timeacc_biased)}\
           --input-coeffs-unbiased   {",".join(input.timeacc_unbiased)}\
           --input-csp               {",".join(input.csp_factors)}\
           --input-time-resolution   {",".join(input.time_resolution)}\
           --output-weights-biased   {",".join(output.angacc_biased)}\
           --output-weights-unbiased {",".join(output.angacc_unbiased)}\
           --output-tables-biased    {",".join(output.tables_biased)}\
           --output-tables-unbiased  {",".join(output.tables_unbiased)}\
           --year                    {",".join([wildcards.year])}\
           --version                 {wildcards.version}\
    ) #&> {log} #2>&1""")
    #send_mail(f"Run2 Angular Acceptance", f"{log}")
