# Run2 physics_params ----------------------------------------------------------
#     This rule runs the iterative procedure for FullRun2 years using RD.

rule physics_params_data_run2:
  wildcard_constraints:
    fit = "run2(Poldep|magUp|magDown)?",
  threads: 8
  input:
    samples = lambda wcs: tuples(wcs,mode='Bs2JpsiPhi',year='Run2'),
    # Angular acceptance
    angacc_biased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json',
      'output/params/angular_acceptance/2017/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json',
      'output/params/angular_acceptance/2018/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json'
    ],
    angacc_unbiased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json',
      'output/params/angular_acceptance/2017/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json',
      'output/params/angular_acceptance/2018/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json'
    ],
    # Time acceptance coefficients
    timeacc_biased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_{timeacc}_biased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_{timeacc}_biased.json',
      'output/params/time_acceptance/2017/Bd2JpsiKstar/{version}_{timeacc}_biased.json',
      'output/params/time_acceptance/2018/Bd2JpsiKstar/{version}_{timeacc}_biased.json'
    ],
    timeacc_unbiased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json',
      'output/params/time_acceptance/2017/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json',
      'output/params/time_acceptance/2018/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json'
    ],
    # CSP
    csp_factors = lambda wcs: [
      f'output/params/csp_factors/2015/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json',
      f'output/params/csp_factors/2016/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json',
      f'output/params/csp_factors/2017/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json',
      f'output/params/csp_factors/2018/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json'
    ],
    # Time resolution
    time_resolution = lambda wcs: [
      f'output/params/time_resolution/2015/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json',
      f'output/params/time_resolution/2016/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json',
      f'output/params/time_resolution/2017/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json',
      f'output/params/time_resolution/2018/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json'
    ],
    # Flavor tagging
    flavor = lambda wcs: [
      f'output/params/flavor_tagging/2015/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json',
      f'output/params/flavor_tagging/2016/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json',
      f'output/params/flavor_tagging/2017/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json',
      f'output/params/flavor_tagging/2018/Bs2JpsiPhi/{wcs.version.split("@")[0].split("bdt")[0]}.json'
    ],
  output:
    params = 'output/params/physics_params/run2/Bs2JpsiPhi/{version}_{fit}_{angacc}_{timeacc}.json',
    tables = 'output/tables/angular_fit/run2/Bs2JpsiPhi/{version}_{fit}_{angacc}_{timeacc}.tex'
  log:
    'output/log/physics_params_data/run2/Bs2JpsiPhi/{version}_{fit}_{angacc}_{timeacc}.log'
  run:
    shell(f"""(time\
    python analysis/angular_fit/fit_data.py\
           --samples                 {",".join(input.samples)}\
           --angacc-biased           {",".join(input.angacc_biased)}\
           --angacc-unbiased         {",".join(input.angacc_unbiased)}\
           --timeacc-biased          {",".join(input.timeacc_biased)}\
           --timeacc-unbiased        {",".join(input.timeacc_unbiased)}\
           --csp                     {",".join(input.csp_factors)}\
           --time-resolution         {",".join(input.time_resolution)}\
           --flavor-tagging          {",".join(input.flavor)}\
           --params                  {output.params}\
           --tables                  {output.tables}\
           --year                    {",".join(YEARS['Run2'])}\
           --flag                    {wildcards.fit}_{wildcards.angacc}_{wildcards.timeacc}\
           --version                 {wildcards.version}\
           --blind                   CONFIG['blind']\
    ) &> {log}""")
    send_mail(f"Physics Parameters RD Run2 :: {wildcards}", f"{log}")








rule physics_params_dll_data:
  threads: 8
  input:
    samples = lambda wcs: tuples(wcs,version=f'{wcs.dversion}',mode='Bs2JpsiPhi',year=f'{wcs.dyear}'.title()),
    # Angular acceptance
    angacc_biased = lambda wcs: [
      f'output/params/angular_acceptance/{y}/Bs2JpsiPhi/{wcs.dversion}_{wcs.dangacc}_{wcs.dtimeacc}_biased.json'
    for y in YEARS[ f"{wcs.dyear}".title() ] ],
    angacc_unbiased = lambda wcs: [
      f'output/params/angular_acceptance/{y}/Bs2JpsiPhi/{wcs.dversion}_{wcs.dangacc}_{wcs.dtimeacc}_unbiased.json'
    for y in YEARS[ f"{wcs.dyear}".title() ] ],
    # Time acceptance coefficients
    timeacc_biased = lambda wcs: [
      f'output/params/time_acceptance/{y}/Bd2JpsiKstar/{wcs.dversion}_{wcs.dtimeacc}_biased.json'
    for y in YEARS[ f"{wcs.dyear}".title() ]],
    timeacc_unbiased = lambda wcs: [
      f'output/params/time_acceptance/{y}/Bd2JpsiKstar/{wcs.dversion}_{wcs.dtimeacc}_unbiased.json'
    for y in YEARS[ f"{wcs.dyear}".title() ]],
    # CSP
    csp_factors = lambda wcs: [
      f'output/params/csp_factors/{y}/Bs2JpsiPhi/{wcs.dversion.split("@")[0]}.json'
    for y in YEARS[ f"{wcs.dyear}".title() ] ],
    # Time resolution
    time_resolution = lambda wcs: [
      f'output/params/time_resolution/{y}/Bs2JpsiPhi/{wcs.dversion.split("@")[0]}.json'
    for y in YEARS[ f"{wcs.dyear}".title() ] ],
    # Flavor tagging
    flavor = lambda wcs: [
      f'output/params/flavor_tagging/{y}/Bs2JpsiPhi/{wcs.dversion.split("@")[0]}.json'
    for y in YEARS[ f"{wcs.dyear}".title() ] ],
    params = 'output/params/physics_params/{pyear}/Bs2JpsiPhi/{pversion}_{pfit}_{pangacc}_{ptimeacc}.json',
  params:
    params = 'output/params/physics_params/{dyear}/Bs2JpsiPhi/{dversion}_{dfit}_{dangacc}_{dtimeacc}.json',
  output:
    temp('tmp/dlls/Bs2JpsiPhi/{dyear}_{dversion}_{dfit}_{dangacc}_{dtimeacc}__vs__{pyear}_{pversion}_{pfit}_{pangacc}_{ptimeacc}.npy')
  log:
    'tmp/dlls/Bs2JpsiPhi/{dyear}_{dversion}_{dfit}_{dangacc}_{dtimeacc}__vs__{pyear}_{pversion}_{pfit}_{pangacc}_{ptimeacc}.log'
  run:
    shell(f"""(time\
    python analysis/angular_fit/fit_data_agreement.py\
           --samples                 {",".join(input.samples)}\
           --angacc-biased           {",".join(input.angacc_biased)}\
           --angacc-unbiased         {",".join(input.angacc_unbiased)}\
           --timeacc-biased          {",".join(input.timeacc_biased)}\
           --timeacc-unbiased        {",".join(input.timeacc_unbiased)}\
           --csp                     {",".join(input.csp_factors)}\
           --time-resolution         {",".join(input.time_resolution)}\
           --flavor-tagging          {",".join(input.flavor)}\
           --params                  {input.params}\
           --dll                     {output}\
           --year                    {",".join(YEARS[f'{wildcards.dyear}'.title()])}\
           --flag                    {wildcards.dfit}_{wildcards.dangacc}_{wildcards.dtimeacc}\
           --version                 {wildcards.dversion}\
           --blind                   1\
    ) &> {log}""")




rule physics_params_dll_compare:
  threads: 8
  input:
    pars_d = 'output/params/physics_params/{dyear}/Bs2JpsiPhi/{dversion}_{dfit}_{dangacc}_{dtimeacc}.json',
    pars_p = 'output/params/physics_params/{pyear}/Bs2JpsiPhi/{pversion}_{pfit}_{pangacc}_{ptimeacc}.json',
    logl_dd = 'tmp/dlls/Bs2JpsiPhi/{dyear}_{dversion}_{dfit}_{dangacc}_{dtimeacc}__vs__{dyear}_{dversion}_{dfit}_{dangacc}_{dtimeacc}.npy',
    logl_dp = 'tmp/dlls/Bs2JpsiPhi/{dyear}_{dversion}_{dfit}_{dangacc}_{dtimeacc}__vs__{pyear}_{pversion}_{pfit}_{pangacc}_{ptimeacc}.npy',
    logl_pd = 'tmp/dlls/Bs2JpsiPhi/{pyear}_{pversion}_{pfit}_{pangacc}_{ptimeacc}__vs__{dyear}_{dversion}_{dfit}_{dangacc}_{dtimeacc}.npy',
    logl_pp = 'tmp/dlls/Bs2JpsiPhi/{pyear}_{pversion}_{pfit}_{pangacc}_{ptimeacc}__vs__{pyear}_{pversion}_{pfit}_{pangacc}_{ptimeacc}.npy'
  output:
    temp('tmp/pvalues/Bs2JpsiPhi/{dyear}_{dversion}_{dfit}_{dangacc}_{dtimeacc}__vs__{pyear}_{pversion}_{pfit}_{pangacc}_{ptimeacc}.npy')
  run:
    import numpy as np
    from ipanema import Parameters
    from utils.stats import check_DLL_agreement
    
    # load likelihoods
    logls = np.zeros((2,2))
    logls[0,0] = np.load(f"{input.logl_dd}")
    logls[0,1] = np.load(f"{input.logl_dp}")
    logls[1,0] = np.load(f"{input.logl_pd}")
    logls[1,1] = np.load(f"{input.logl_pp}")

    # load parameters
    pars = [
      Parameters.load(f'{input.pars_d}'),
      Parameters.load(f'{input.pars_p}')
    ]

    # check agreement
    s, p, d = check_DLL_agreement(logls, pars, sigmas=True, pvalue=True, ndof=True, mdof=8)
    #ans = f"{wildcards.pyear:>10} & {wildcards.pversion:>10} & {wildcards.pfit:>10} & {wildcards.pangacc:>10} & {wildcards.ptimeacc:>10} & {wildcards.dyear:>10} & {wildcards.dversion:>10} & {wildcards.dfit:>10} & {wildcards.dangacc:>10} & {wildcards.dtimeacc:>10} & ${s:+.2f}\sigma$ & ${p:.4f}$ & ${d:.0f}$"
    ans = np.float64([s, p, d])
    print(ans)

    # write
    # with open(f'{output}','w') as fp:
    #   fp.write(ans)
    # fp.close()
    np.save(f"{output}", ans)



rule physics_params_dll_table:
  threads: 8
  input:
    run2_vs_yearly = [
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2015_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2016_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2017_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2018_{pversion}_yearly_{pangacc}_{ptimeacc}.tex'
    ],
    run2_vs_bins = [
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__run2_{pversion}@cutpTB1_run2_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__run2_{pversion}@cutpTB2_run2_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__run2_{pversion}@cutpTB3_run2_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__run2_{pversion}@cutpTB4_run2_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__run2_{pversion}@cutetaB1_run2_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__run2_{pversion}@cutetaB2_run2_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__run2_{pversion}@cutetaB3_run2_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__run2_{pversion}@cutsigmat1_run2_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__run2_{pversion}@cutsigmat2_run2_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__run2_{pversion}@cutsigmat3_run2_{pangacc}_{ptimeacc}.tex',
    ],
    run2_vs_binedyears = [
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2015_{pversion}@cutpTB1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2015_{pversion}@cutpTB2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2015_{pversion}@cutpTB3_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2015_{pversion}@cutpTB4_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2015_{pversion}@cutetaB1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2015_{pversion}@cutetaB2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2015_{pversion}@cutetaB3_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2015_{pversion}@cutsigmat1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2015_{pversion}@cutsigmat2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2015_{pversion}@cutsigmat3_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2016_{pversion}@cutpTB1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2016_{pversion}@cutpTB2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2016_{pversion}@cutpTB3_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2016_{pversion}@cutpTB4_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2016_{pversion}@cutetaB1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2016_{pversion}@cutetaB2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2016_{pversion}@cutetaB3_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2016_{pversion}@cutsigmat1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2016_{pversion}@cutsigmat2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2016_{pversion}@cutsigmat3_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2017_{pversion}@cutpTB1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2017_{pversion}@cutpTB2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2017_{pversion}@cutpTB3_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2017_{pversion}@cutpTB4_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2017_{pversion}@cutetaB1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2017_{pversion}@cutetaB2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2017_{pversion}@cutetaB3_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2017_{pversion}@cutsigmat1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2017_{pversion}@cutsigmat2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2017_{pversion}@cutsigmat3_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2018_{pversion}@cutpTB1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2018_{pversion}@cutpTB2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2018_{pversion}@cutpTB3_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2018_{pversion}@cutpTB4_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2018_{pversion}@cutetaB1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2018_{pversion}@cutetaB2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2018_{pversion}@cutetaB3_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2018_{pversion}@cutsigmat1_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2018_{pversion}@cutsigmat2_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/run2_{dversion}_run2_{dangacc}_{dtimeacc}__vs__2018_{pversion}@cutsigmat3_yearly_{pangacc}_{ptimeacc}.tex',
    ],
    yearly_vs_yearly = [
      'tmp/dlls/Bs2JpsiPhi/2018_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2015_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2018_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2016_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2018_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2017_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2018_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2018_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2017_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2015_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2017_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2016_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2017_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2017_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2017_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2018_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2016_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2015_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2016_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2016_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2016_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2017_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2016_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2018_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2015_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2015_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2015_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2016_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2015_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2017_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
      'tmp/dlls/Bs2JpsiPhi/2015_{dversion}_yearly_{pangacc}_{dtimeacc}__vs__2018_{pversion}_yearly_{pangacc}_{ptimeacc}.tex',
    ],
  output:
    'output/tables/systematics/dlls/Bs2JpsiPhi/{dversion}_{dangacc}_{dtimeacc}__vs__{pversion}_{pangacc}_{ptimeacc}.tex'
  run:
    import numpy as np
    from ipanema import Parameters
    from utils.stats import check_DLL_agreement

    table = []
    table.append("\\begin{tabular}{ccccc|ccccc|ccc}")
    table.append("\multicolumn{5}{c|}{Parameter set} & \multicolumn{5}{c|}{Sample set} \\ ")
    table.append(f"{'year':>10} & {'version':>10} & {'fit':>10} & {'angacc':>10} & {'timeacc':>10} & {'year':>10} & {'version':>10} & {'fit':>10} & {'angacc':>10} & {'timeacc':>10} & {'Prob':>10}  & {'p-value':>8} & {'dof':>3} \\\\")
    table.append('\\hline')
    for i in input.run2_vs_yearly:
      with open(i,'r') as fp:
        table.append(fp.read()+"\\\\")
    table.append('\\hline')
    for i in input.run2_vs_bins:
      with open(i,'r') as fp:
        table.append(fp.read()+"\\\\")
    table.append('\\hline')
    for i in input.run2_vs_binedyears:
      with open(i,'r') as fp:
        table.append(fp.read()+"\\\\")
    table.append('\\hline')
    for i in input.yearly_vs_yearly:
      with open(i,'r') as fp:
        table.append(fp.read()+"\\\\")
    table.append("\\end{tabular}")

    print("\n".join(table))

    # write
    with open(f'{output}','w') as fp:
      fp.write( "\n".join(table) )
    fp.close()
    0







# Run2a angular acceptance -----------------------------------------------------
#     This rule runs the iterative procedure for Run2a years (2015&2016) using
#     both MC and MC_dG0 files.
rule physics_params_data_run2a:
  threads: 8
  input:
    samples = lambda wcs: tuples(wcs,mode='Bs2JpsiPhi',year='Run2a'),
    # Angular acceptance
    angacc_biased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json'
    ],
    angacc_unbiased = [
      'output/params/angular_acceptance/2015/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json',
      'output/params/angular_acceptance/2016/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json'
    ],
    # Time acceptance coefficients
    timeacc_biased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_{timeacc}_biased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_{timeacc}_biased.json'
    ],
    timeacc_unbiased = [
      'output/params/time_acceptance/2015/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json',
      'output/params/time_acceptance/2016/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json'
    ],
    # CSP
    csp_factors = lambda wcs: [
      f'output/params/csp_factors/2015/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/csp_factors/2016/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ],
    # Time resolution
    time_resolution = lambda wcs: [
      f'output/params/time_resolution/2015/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/time_resolution/2016/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ],
    # Flavor tagging
    flavor = lambda wcs: [
      f'output/params/flavor_tagging/2015/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json',
      f'output/params/flavor_tagging/2016/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ],
  output:
    params = 'output/params/physics_params/run2a/Bs2JpsiPhi/{version}_run2a_{angacc}_{timeacc}.json',
    tables = 'output/tables/angular_fit/run2a/Bs2JpsiPhi/{version}_run2a_{angacc}_{timeacc}.tex'
  log:
    'output/log/physics_params_data/run2a/Bs2JpsiPhi/{version}_{angacc}_{timeacc}.log'
  run:
    shell(f"""(time\
    python analysis/angular_fit/fit_data.py\
           --samples                 {",".join(input.samples)}\
           --angacc-biased           {",".join(input.angacc_biased)}\
           --angacc-unbiased         {",".join(input.angacc_unbiased)}\
           --timeacc-biased          {",".join(input.timeacc_biased)}\
           --timeacc-unbiased        {",".join(input.timeacc_unbiased)}\
           --csp                     {",".join(input.csp_factors)}\
           --time-resolution         {",".join(input.time_resolution)}\
           --flavor-tagging          {",".join(input.flavor)}\
           --params                  {output.params}\
           --tables                  {output.tables}\
           --year                    {",".join(YEARS['Run2a'])}\
           --flag                    run2a_{wildcards.angacc}_{wildcards.timeacc}\
           --version                 {wildcards.version}\
    ) &> {log}""")
    send_mail(f"Physics Parameters RD Run2a", f"{log}")




# Yearly time-dependent angular fit --------------------------------------------
#     This rule runs the iterative procedure for Run2a years (2015&2016) using
#     both MC and MC_dG0 files.
rule physics_params_dataYearly:
  wildcard_constraints:
    fit = "yearly.*"
  threads: 8
  input:
    samples = lambda wcs: [tuples(wcs,mode='Bs2JpsiPhi')],
    # Angular acceptance
    angacc_biased = [
      'output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_biased.json'
    ],
    angacc_unbiased = [
      'output/params/angular_acceptance/{year}/Bs2JpsiPhi/{version}_{angacc}_{timeacc}_unbiased.json'
    ],
    # Time acceptance coefficients
    timeacc_biased = [
      'output/params/time_acceptance/{year}/Bd2JpsiKstar/{version}_{timeacc}_biased.json'
    ],
    timeacc_unbiased = [
      'output/params/time_acceptance/{year}/Bd2JpsiKstar/{version}_{timeacc}_unbiased.json'
    ],
    # CSP
    csp_factors = lambda wcs: [
      f'output/params/csp_factors/{wcs.year}/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ],
    # Time resolution
    time_resolution = lambda wcs: [
      f'output/params/time_resolution/{wcs.year}/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ],
    # Flavor tagging
    flavor = lambda wcs: [
      f'output/params/flavor_tagging/{wcs.year}/Bs2JpsiPhi/{wcs.version.split("@")[0]}.json'
    ],
  output:
    params = 'output/params/physics_params/{year}/Bs2JpsiPhi/{version}_{fit}_{angacc}_{timeacc}.json',
    tables = 'output/tables/angular_fit/{year}/Bs2JpsiPhi/{version}_{fit}_{angacc}_{timeacc}.tex'
  log:
    'output/log/physics_params_data/{year}/Bs2JpsiPhi/{version}_{fit}_{angacc}_{timeacc}.log'
  run:
    shell(f"""(time\
    python analysis/angular_fit/fit_data.py\
           --samples                 {",".join(input.samples)}\
           --angacc-biased           {",".join(input.angacc_biased)}\
           --angacc-unbiased         {",".join(input.angacc_unbiased)}\
           --timeacc-biased          {",".join(input.timeacc_biased)}\
           --timeacc-unbiased        {",".join(input.timeacc_unbiased)}\
           --csp                     {",".join(input.csp_factors)}\
           --time-resolution         {",".join(input.time_resolution)}\
           --flavor-tagging          {",".join(input.flavor)}\
           --params                  {output.params}\
           --tables                  {output.tables}\
           --year                    {",".join([wildcards.year])}\
           --version                 {wildcards.version}\
           --flag                    yearly_{wildcards.angacc}_{wildcards.timeacc}\
           --blind                   0\
    ) &> {log}""")
    send_mail(f"Physics Parameters RD Yearly :: {wildcards}", f"{log}")













# Run2a angular acceptance -----------------------------------------------------
#     This rule runs the iterative procedure for Run2a years (2015&2016) using
#     both MC and MC_dG0 files.
rule physics_params_mc:
  threads: 8
  wildcard_constraints:
    mode = "(TOY|MC)_(Bs2JpsiPhi(_dG0)?|Bs2JpsiKK_Swave)"
  input:
    samples = lambda wcs: [tuples(wcs)],
    # CSP
    csp_factors = lambda wcs: [
      f'output/params/csp_factors/{wcs.year}/{wcs.mode}/{wcs.version.split("@")[0]}.json',
    ],
  output:
    params = 'output/params/physics_params/{year}/{mode}/{version}_base.json',
    tables = 'output/tables/angular_fit/{year}/{mode}/{version}_base.tex'
  log:
    'output/log/physics_params_mc/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
    python analysis/angular_fit/fit_mc.py\
           --samples                 {",".join(input.samples)}\
           --csp                     {",".join(input.csp_factors)}\
           --params                  {output.params}\
           --tables                  {output.tables}\
           --year                    {",".join([wildcards.year])}\
           --version                 {wildcards.version}\
    ) &> {log}""")
    send_mail(f"Physics Parameters MC :: {wildcards}", f"{log}")


rule physics_params_mcfit_vs_mcgen:
  threads: 8
  wildcard_constraints:
    mode = "(TOY|MC)_(Bs2JpsiPhi(_dG0)?|Bs2JpsiKK_Swave)"
  input:
    fit = 'output/params/physics_params/{year}/{mode}/{version}_base.json',
    gen = 'analysis/params/generator/2018/{mode}.json'
  output:
    tables = 'output/tables/physics_params/{year}/{mode}/{version}_base_comparisonFitGen.tex'
  log:
    'output/log/physics_params_mcfit_vs_mcgen/{year}/{mode}/{version}_base.log'
  run:
    from ipanema import Parameters
    fit = Parameters.load(f'{input.fit}')
    gen = Parameters.load(f'{input.gen}')
    table = []
    table.append(f' {"Parameter":>30}  &  {"Fit":>20}  &  {"Gen":>7}  &  {"Pull":>4}')
    for par in fit.keys():
      if par in gen.keys():
        table.append(f'${fit[par].latex:>30} $&$ {f"{fit[par].uvalue:.2uL}":>25} $&$ {gen[par].value:+.4f} $&$ {(fit[par].value-gen[par].value)/fit[par].stdev if fit[par].stdev else 0:+.1f}')
      else:
        table.append(f'${fit[par].latex:>30} $&$ {f"{fit[par].uvalue:.2uL}":>25}')
    print(" \\\\ \n".join(table))
    with open(f'{output}','w') as f:
      f.write("\n".join(table))
    f.close()
