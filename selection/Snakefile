# SWEIGHTS
#
#   Description: Background subtracted samples are required to perfrom fits to
#                the time-angular distribution of Bq mesons if the background
#                is not modelled. Within the whole phis-scq pipeline all fits
#                asume the samples are background subtracted. This set of rules
#                allow the user to compute sWeights for all the involved modes.
#                TODO: complete the following description:
#                * massmodel: This wildcard allows to use different mass models
#                      for any of the Bq modes.
#                * massbin: If 
#                      basically tell which kind of rules are run.
#
#        Author: Marcos Romero Lamas (mromerol@cern.ch)


# mass fitters for Bd {{{

rule mass_prefit_bd_mc:
  """
  Run mass fit on selected Bs0->J/psiPhi MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bd2JpsiKstar',
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
  output:
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    plots = directory('output/figures/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bd_mc.py',
  log:
    'output/log/mass_prefit_bd_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    ) &> {log}""")


rule mass_fit_bd_mc:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bd2JpsiKstar',
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bd_mc.py',
  log:
    'output/log/mass_fit_bd_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    ) &> {log}""")


rule mass_fit_bd_rd:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'Bd2JpsiKstar',
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
    params = 'output/params/mass_prefit/{year}/MC_{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bd_mc.py',
  log:
    'output/log/mass_fit_bd_rd/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    ) &> {log}""")

# }}}


# mass fitters for Bu {{{

rule mass_prefit_bu_mc:
  """
  Run mass fit on selected Bs0->J/psiPhi MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bu2JpsiKplus',
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
  output:
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    plots = directory('output/figures/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bu_mc.py',
  log:
    'output/log/mass_prefit_bu_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    ) &> {log}""")


rule mass_fit_bu_mc:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_Bu2JpsiKplus',
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bu_mc.py',
  log:
    'output/log/mass_fit_bu_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    ) &> {log}""")


rule mass_fit_bu_rd:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'Bu2JpsiKplus',
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
    params = 'output/params/mass_prefit/{year}/MC_{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bu_mc.py',
  log:
    'output/log/mass_fit_bu_rd/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    ) &> {log}""")

# }}}


# mass fitters for Bs {{{

rule mass_prefit_bs_mc:
  """
  Run mass fit on selected Bs0->J/psiPhi MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_(Bs2JpsiPhi(_dG0)?|Bs2JpsiKK_Swave)'
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
  output:
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    plots = directory('output/figures/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bs_rd.py',
  log:
    'output/log/mass_prefit_bs_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    ) &> {log}""")


rule mass_fit_bs_mc:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'MC_(Bs2JpsiPhi(_dG0)?|Bs2JpsiKK_Swave)'
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
    params = 'output/params/mass_prefit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bs_rd.py',
  log:
    'output/log/mass_fit_bs_mc/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    ) &> {log}""")


rule mass_fit_bs_rd:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  wildcard_constraints:
    mode = 'Bs2JpsiPhi'
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
    params = 'output/params/mass_prefit/{year}/MC_{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
  output:
    params = 'output/params/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.json',
    sweights = temp(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.npy'),
    plots = directory('output/figures/mass_fit/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}/')
  params:
    script = 'selection/mass_fit/bs_rd.py',
  log:
    'output/log/mass_bs_fit_rd/{year}/{mode}/{version}_{massmodel}_{massbin}_{trigger}.log',
  run:
    shell(f"""(time\
    python {params.script} \
    --sample {input.root_file} \
    --input-params {input.params} \
    --output-params {output.params} \
    --output-figures {output.plots} \
    --mass-model {wildcards.massmodel} \
    --mass-weight wLb \
    --mass-bin {wildcards.massbin} \
    --trigger {wildcards.trigger}\
    --mode {wildcards.mode} \
    --sweights {output.sweights} \
    ) &> {log}""")

# }}}


# rules to produce sWeights  {{{

# TODO: Theseset of rules can be *obviously* be merged

rule sweights_add:
  """
  Run mass fit on selected B0->J/psiK* MC to determine Ipatia tail parameters for
  the fit to data. It only takes B_BKGCAT=0,50 candidates.
  """
  threads: 2
  resources:
    mem_mb=6000
  input:
    root_file = lambda wcs: tuples(wcs, weight='selected'),
    biased = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_biased.npy',
                                year=f"{wcs.year}", mode=f"{wcs.mode}", version=f"{wcs.version}",
                                massbin=config[(f'{wcs.mode}'.lower()[:2] if not 'MC' in f'{wcs.mode}' else f'{wcs.mode}'.split('_')[1].lower()[:2]) + "_mass_bins"],
                                massmodel=config[(f'{wcs.mode}'.lower()[:2] if not 'MC' in f'{wcs.mode}' else f'{wcs.mode}'.split('_')[1].lower()[:2]) + "_mass_model"]
                               ),
    unbiased = lambda wcs: expand(SAMPLES+'/{year}/{mode}/{version}_{massmodel}_{massbin}_unbiased.npy',
                                year=f"{wcs.year}", mode=f"{wcs.mode}", version=f"{wcs.version}",
                                massbin=config[(f'{wcs.mode}'.lower()[:2] if not 'MC' in f'{wcs.mode}' else f'{wcs.mode}'.split('_')[1].lower()[:2]) + "_mass_bins"],
                                massmodel=config[(f'{wcs.mode}'.lower()[:2] if not 'MC' in f'{wcs.mode}' else f'{wcs.mode}'.split('_')[1].lower()[:2]) + "_mass_model"]
                               ),
  output:
    root_file = temp(SAMPLES+'/{year}/{mode}/{version}_sWeight.root'),
  params:
    script = 'selection/sweights/sweighter.py',
  log:
    'output/log/sweights_bs_rd/{year}/{mode}/{version}.log',
  run:
    bpars = input.biased
    bpars = [bpars] if isinstance(bpars,str) else bpars
    upars = input.unbiased
    upars = [upars] if isinstance(upars,str) else upars
    shell(f"""(time\
    python {params.script} \
    --input-sample {input.root_file} \
    --output-sample {output.root_file} \
    --biased-weights {",".join(bpars)} \
    --unbiased-weights {",".join(upars)} \
    --mode {wildcards.mode} \
    ) &> {log}""")

# }}}}


# vim: foldmethod=marker
