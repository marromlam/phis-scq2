# polarity weighting -----------------------------------------------------------
#    Adds polWeight to MC tuples matching the corresponding data sample. This
#    rule runs only over MC tuples.
#    {{{

rule reweighting_polarity:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "MC_(Bs2JpsiPhi(_dG0)?|Bd2JpsiKstar|Bu2JpsiKplus|Bs2JpsiKK_Swave)"
  input:
    original = lambda wcs: tuples(wcs,weight='sWeight'),
    target   = lambda wcs: tuples(wcs,mode='cdata',weight='sWeight'),
  output:
    sample   = temp(SAMPLES_PATH+'{year}/{mode}/{version}_polWeight.root')
  log:
    'output/log/reweightings/polarity_weighting/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
          python analysis/reweightings/polarity_weighting.py\
                 --original-file {input.original}\
                 --original-treename DecayTree\
                 --target-file {input.target}\
                 --target-treename DecayTree\
                 --output-file {output.sample}
    ) &> {log}""")
    send_mail(f"Polarity weighting :: {wildcards}", f"{log}")

# }}}

# p.d.f. weighting -------------------------------------------------------------
#    Adds pdfWeight to MC tuples matching the corresponding data sample. This
#    rule runs only over MC tuples.
#    {{{
rule reweighting_pdf:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "MC_(Bs2JpsiPhi(_dG0)?|Bd2JpsiKstar|Bs2JpsiKK_Swave)"
  input:
    sample = lambda wcs: tuples(wcs,weight='dg0Weight'),
  params:
    original = lambda wcs: f"{wcs.year}/{'Bs2JpsiPhi' if 'Bs' in f'{wcs.mode}' else 'Bd2JpsiKstar'}.json",
    target = lambda wcs: f"{wcs.year}/{wcs.mode}.json",
  output:
    sample = temp(SAMPLES_PATH+'{year}/{mode}/{version}_pdfWeight.root')
  log:
    'output/log/reweightings/pdf_weighting/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
      python analysis/reweightings/pdf_weighting.py\
             --input-file {input.sample}\
             --tree-name DecayTree\
             --output-file {output.sample}\
             --target-params analysis/params/generator/{params.target}\
             --original-params analysis/params/generator/{params.original}\
             --mode {wildcards.mode}\
    ) &> {log}""")
    send_mail(f"PDF weighting :: {wildcards}", f"{log}")


rule reweighting_dg0:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "(MC_Bs2JpsiPhi|MC_Bs2JpsiKK_Swave)"
  input:
    sample = lambda wcs: tuples(wcs,weight='polWeight'),
  params:
    original = lambda wcs: f"{wcs.year}/MC_Bs2JpsiPhi_dG0.json",
    target = lambda wcs: f"{wcs.year}/{wcs.mode}.json", #WARNING!
  output:
    sample = temp(SAMPLES_PATH+'{year}/{mode}/{version}_dg0Weight.root')
  log:
    'output/log/reweightings/pdf_weighting/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
      python analysis/reweightings/pdf_weighting.py\
             --input-file {input.sample}\
             --tree-name DecayTree\
             --output-file {output.sample}\
             --target-params analysis/params/generator/{params.target}\
             --original-params analysis/params/generator/{params.original}\
             --mode {wildcards.mode}\
    ) &> {log}""")
    send_mail(f"dG0 weighting :: {wildcards}", f"{log}")

# }}}


# kinematic weighting {{{
#    Adds kinWeight to MC_BsJpsiPhi*, MC_BdJpsiKstar and Bd2JpsiKstar tuples
#    gb-weighting them to match kinematic distributions of their complementary
#    sample.

rule reweighting_kinematic:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "(MC_(Bs2JpsiPhi(_dG0)?|Bd2JpsiKstar|Bu2JpsiKplus|Bs2JpsiKK_Swave)|Bd2JpsiKstar|Bu2JpsiKplus)"
  input:
    original = lambda wcs: tuples(wcs,weight='oddWeight'),
    target = lambda wcs: tuples(wcs,mode='cdata',weight='kinWeight'),
  output:
    sample = temp(SAMPLES_PATH+'{year}/{mode}/{version}_kinWeight.root')
  log:
    'output/log/reweightings/kinematic_weighting/{year}/{mode}/{version}.log'
  run:
    from angular_acceptance.bdtconf_tester import bdtmesh
    bdconfig = CONFIG['time_acceptance_bdtconfig']
      
    year = f'{wildcards.year}'
    mode = f'{wildcards.mode}'
    version = f'{wildcards.version}'

    # change bdt according to filename, if applies
    if 'bdt' in version:
      bdtconfig = int(version.split('bdt')[1])
      bdtconfig = bdtmesh(bdtconfig, CONFIG['bdt_tests'], False)
    
    if mode.startswith('MC_Bs2Jpsi'):
      shell(f"""(time\
      python analysis/reweightings/kinematic_weighting.py\
      --original-file {input.original}\
      --original-treename DecayTree\
      --original-vars "B_PT X_M" \
      --original-weight "(sw/gb_weights)*polWeight*pdfWeight"\
      --target-file {input.target}\
      --target-treename DecayTree\
      --target-vars "B_PT X_M"\
      --target-weight "sw"\
      --output-file {output.sample}\
      --n-estimators {bdconfig['n_estimators']}\
      --learning-rate {bdconfig['learning_rate']}\
      --max-depth {bdconfig['max_depth']}\
      --min-samples-leaf {bdconfig['min_samples_leaf']}
      ) &> {log}""")
    elif mode.startswith('MC_Bd2JpsiKstar'):
      shell(f"""(time\
      python analysis/reweightings/kinematic_weighting.py\
      --original-file {input.original}\
      --original-treename DecayTree\
      --original-vars "B_PT X_M" \
      --original-weight "sw*polWeight*pdfWeight"\
      --target-file {input.target}\
      --target-treename DecayTree\
      --target-vars "B_PT X_M"\
      --target-weight "sw*kinWeight"\
      --output-file {output.sample}\
      --n-estimators {bdconfig['n_estimators']}\
      --learning-rate {bdconfig['learning_rate']}\
      --max-depth {bdconfig['max_depth']}\
      --min-samples-leaf {bdconfig['min_samples_leaf']}
      ) &> {log}""")
    elif mode.startswith('Bd2JpsiKstar'):
      shell(f"""(time\
      python analysis/reweightings/kinematic_weighting.py\
      --original-file {input.original}\
      --original-treename DecayTree\
      --original-vars "B_PT B_P" \
      --original-weight "sw"\
      --target-file {input.target}\
      --target-treename DecayTree\
      --target-vars "B_PT B_P"\
      --target-weight "sw"\
      --output-file {output.sample}\
      --n-estimators {bdconfig['n_estimators']}\
      --learning-rate {bdconfig['learning_rate']}\
      --max-depth {bdconfig['max_depth']}\
      --min-samples-leaf {bdconfig['min_samples_leaf']}
      ) &> {log}""")
    elif mode.startswith('MC_Bu2JpsiKplus'):
      shell(f"""(time\
      python analysis/reweightings/kinematic_weighting.py\
      --original-file {input.original}\
      --original-treename DecayTree\
      --original-vars "B_PT" \
      --original-weight "sw"\
      --target-file {input.target}\
      --target-treename DecayTree\
      --target-vars "B_PT"\
      --target-weight "sw"\
      --output-file {output.sample}\
      --n-estimators {bdconfig['n_estimators']}\
      --learning-rate {bdconfig['learning_rate']}\
      --max-depth {bdconfig['max_depth']}\
      --min-samples-leaf {bdconfig['min_samples_leaf']}
      ) &> {log}""")
    elif mode.startswith('Bu2JpsiKplus'):
      shell(f"""(time\
      python analysis/reweightings/kinematic_weighting.py\
      --original-file {input.original}\
      --original-treename DecayTree\
      --original-vars "B_PT B_P" \
      --original-weight "sw"\
      --target-file {input.target}\
      --target-treename DecayTree\
      --target-vars "B_PT B_P"\
      --target-weight "sw"\
      --output-file {output.sample}\
      --n-estimators {bdconfig['n_estimators']}\
      --learning-rate {bdconfig['learning_rate']}\
      --max-depth {bdconfig['max_depth']}\
      --min-samples-leaf {bdconfig['min_samples_leaf']}
      ) &> {log}""")
    else:
      shell(f"""(time\
      cp {input.original} {output.sample}
      ) &> {log}""")
    send_mail(f"Kinematic weighting :: {wildcards}", f"{log}")


rule reweighting_weirdly:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "MC_(Bs2JpsiPhi(_dG0)?|Bd2JpsiKstar|Bu2JpsiKplus|Bs2JpsiKK_Swave)"
  input:
    original = lambda wcs: tuples(wcs,weight='kbuWeight'),
    target = lambda wcs: tuples(wcs,mode='cdata',weight='kinWeight'),
  output:
    sample = temp(SAMPLES_PATH+'{year}/{mode}/{version}_oddWeight.root')
  log:
    'output/log/reweightings/kinematic_weighting/{year}/{mode}/{version}.log'
  run:
    from angular_acceptance.bdtconf_tester import bdtmesh
    bdconfig = CONFIG['time_acceptance_bdtconfig']

    year = f'{wildcards.year}'
    mode = f'{wildcards.mode}'
    version = f'{wildcards.version}'

    # change bdt according to filename, if applies
    if 'bdt' in version:
      bdtconfig = int(version.split('bdt')[1])
      bdtconfig = bdtmesh(bdtconfig, CONFIG['bdt_tests'], False)

    if mode.startswith('MC_Bs2Jpsi'):
      shell(f"""(time\
      python analysis/reweightings/kinematic_weighting.py\
      --original-file {input.original}\
      --original-treename DecayTree\
      --original-vars "log_B_IPCHI2_mva B_DTF_CHI2NDOF" \
      --original-weight "(sw/gb_weights)*polWeight*pdfWeight"\
      --target-file {input.target}\
      --target-treename DecayTree\
      --target-vars "log_B_IPCHI2_mva B_DTF_CHI2NDOF"\
      --target-weight "sw"\
      --output-file {output.sample}\
      --n-estimators {bdconfig['n_estimators']}\
      --learning-rate {bdconfig['learning_rate']}\
      --max-depth {bdconfig['max_depth']}\
      --min-samples-leaf {bdconfig['min_samples_leaf']}
      ) &> {log}""")
    elif mode.startswith('MC_Bd2JpsiKstar'):
      shell(f"""(time\
      python analysis/reweightings/kinematic_weighting.py\
      --original-file {input.original}\
      --original-treename DecayTree\
      --original-vars "log_B_IPCHI2_mva B_DTF_CHI2NDOF" \
      --original-weight "sw*polWeight*pdfWeight"\
      --target-file {input.target}\
      --target-treename DecayTree\
      --target-vars "log_B_IPCHI2_mva B_DTF_CHI2NDOF"\
      --target-weight "sw*kinWeight"\
      --output-file {output.sample}\
      --n-estimators {bdconfig['n_estimators']}\
      --learning-rate {bdconfig['learning_rate']}\
      --max-depth {bdconfig['max_depth']}\
      --min-samples-leaf {bdconfig['min_samples_leaf']}
      ) &> {log}""")
    else:
      shell(f"""(time\
      cp {input.original} {output.sample}
      ) &> {log}""")
    send_mail(f"Kinematic weighting :: {wildcards}", f"{log}")


rule reweighting_kinematicBu:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "(MC_)?Bd2JpsiKstar"
  input:
    original = lambda wcs: tuples(wcs,weight='pdfWeight'),
    target = lambda wcs: tuples(wcs,
      mode='Bu2JpsiKplus' if f'{wcs.mode}'=='Bd2JpsiKstar' else 'Bd2JpsiKstar',
      weight='kbuWeight'),
  output:
    sample = temp(SAMPLES_PATH+'{year}/{mode}/{version}_kbuWeight.root')
  log:
    'output/log/reweightings/kinematic_weighting/{year}/{mode}/{version}.log'
  run:
    from angular_acceptance.bdtconf_tester import bdtmesh
    bdconfig = CONFIG['time_acceptance_bdtconfig']    
    year = f'{wildcards.year}'
    mode = f'{wildcards.mode}'
    version = f'{wildcards.version}'
    
    # change bdt according to filename, if applies
    if 'bdt' in version:
      bdtconfig = int(version.split('bdt')[1])
      bdtconfig = bdtmesh(bdtconfig, CONFIG['bdt_tests'], False)
    
    if mode.startswith('MC_Bd2JpsiKstar'):
      shell(f"""(time\
      python analysis/reweightings/kinematic_weighting.py\
      --original-file {input.original}\
      --original-treename DecayTree\
      --original-vars "B_PT X_M" \
      --original-weight "sw*polWeight*pdfWeight"\
      --target-file {input.target}\
      --target-treename DecayTree\
      --target-vars "B_PT X_M"\
      --target-weight "sw*kbuWeight"\
      --output-file {output.sample}\
      --n-estimators {bdconfig['n_estimators']}\
      --learning-rate {bdconfig['learning_rate']}\
      --max-depth {bdconfig['max_depth']}\
      --min-samples-leaf {bdconfig['min_samples_leaf']}\
      ) &> {log}""")
    elif mode.startswith('Bd2JpsiKstar'):
      shell(f"""(time\
      python analysis/reweightings/kinematic_weighting.py\
      --original-file {input.original}\
      --original-treename DecayTree\
      --original-vars "B_PT B_P"\
      --original-weight "sw"\
      --target-file {input.target}\
      --target-treename DecayTree\
      --target-vars "B_PT B_P"\
      --target-weight "sw"\
      --output-file {output.sample}\
      --n-estimators {bdconfig['n_estimators']}\
      --learning-rate {bdconfig['learning_rate']}\
      --max-depth {bdconfig['max_depth']}\
      --min-samples-leaf {bdconfig['min_samples_leaf']}\
      ) &> {log}""")
    else:
      shell(f"""(time\
      cp {input.original} {output.sample}
      ) &> {log}""")
    send_mail(f"Kinematic Bu weighting :: {wildcards}", f"{log}")



# reweighting plots ------------------------------------------------------------
#    Creates some plots for the reweightings done for the time acceptance,
#    angular acceptance and some comparison with Simon

rule reweightings_plot_time_acceptance:
  resources:
    mem_mb=1024
  wildcard_constraints:
    branch = "(p(T)?(B|Hp|Hm)|mHH)",
    weight = "(s|kin|kkp)Weight"
  input:
    original = lambda wcs: tuples(wcs),
    target = lambda wcs: tuples(wcs,mode='cdata')
  output:
    sweighted = 'output/figures/reweightings/{year}/{mode}/{version,[A-Za-z0-9]+}_{branch}_sWeight.pdf',
    kinweighted = 'output/figures/reweightings/{year}/{mode}/{version}_{branch}_kinWeight.pdf',
  log:
    'output/log/reweightings/plot_time_reweightings/{year}/{mode}/{version}_{branch}.log',
  run:
    shell(f"""(time\
    python analysis/reweightings/reweighting_plots.py\
    --original {input.original}\
    --target {input.target}\
    --year {wildcards.year}\
    --mode {wildcards.mode}\
    --version {wildcards.version}\
    --branch {wildcards.branch}\
    --sweighted {output.sweighted}\
    --kinweighted {output.kinweighted}\
    ) &> {log}""")
    send_mail(f"Reweighting plots TA :: {wildcards}", f"{log}", f"{output}".split(' '))


rule reweightings_plot_angular_acceptance:
  wildcard_constraints:
    mode = "(TOY|MC)_Bs2JpsiPhi(_dG0)?",
    branch = "(p(T)?(B|Hp|Hm)|mHH)",
    weight = "(s|kin|kkp)Weight"
  input:
    original = lambda wcs: tuples(wcs),
    weights = lambda wcs: tuples(wcs,weight='angWeight'),
    target = lambda wcs: tuples(wcs,mode='cdata')
  output:
    'output/figures/reweightings/{year}/{mode}/{version,[A-Za-z0-9]+}_{branch}_{angacc}_{timeacc}_{weight}.pdf',
  log:
    'output/log/reweightings/plot_angular_reweightings/{year}/{mode}/{version}_{branch}_{angacc}_{timeacc}_{weight}.log',
  run:
    shell(f"""(time\
    python analysis/angular_acceptance/plot1.py\
    --original {input.original}\
    --weights {input.weights}\
    --target {input.target}\
    --year {wildcards.year}\
    --mode {wildcards.mode}\
    --version {wildcards.version}\
    --branch {wildcards.branch}\
    --treename {wildcards.angacc}_{wildcards.timeacc}\
    --kkpweighted {output}\
    ) &> {log}""")
    send_mail(f"Reweighting plot AA :: {wildcards}", f"{output}")


rule reweightings_simon_comparisons:
  resources:
    mem_mb=1024
  input:
    original = lambda wcs: tuples(wcs),
    target = lambda wcs: tuples(wcs,mode='cdata')
  output:
    'output/figures/reweightings/{year}/{mode}/{version,[A-Za-z0-9]+}_{branch}_comparison.pdf',
  log:
    'output/log/reweightings/simon_comparisons/{year}/{mode}/{version}_{branch}.log',
  run:
    shell(f"""(time\
    python analysis/reweightings/reweighting_plots.py\
    --original {input.original}\
    --target {input.target}\
    --year {wildcards.year}\
    --mode {wildcards.mode}\
    --version {wildcards.version}\
    --branch {wildcards.branch}\
    --sweighted {output.sweighted}\
    --kinweighted {output.kinweighted}\
    ) &> {log}""")

# }}}

# vim: foldmethod=marker
